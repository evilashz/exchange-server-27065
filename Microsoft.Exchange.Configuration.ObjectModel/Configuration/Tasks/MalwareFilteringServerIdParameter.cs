using System;
using Microsoft.Exchange.Data.Directory;
using Microsoft.Exchange.Data.Directory.Management;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;

namespace Microsoft.Exchange.Configuration.Tasks
{
	// Token: 0x0200018F RID: 399
	[Serializable]
	public class MalwareFilteringServerIdParameter : RoleServerIdParameter
	{
		// Token: 0x06000E85 RID: 3717 RVA: 0x0002AFAC File Offset: 0x000291AC
		public MalwareFilteringServerIdParameter()
		{
		}

		// Token: 0x06000E86 RID: 3718 RVA: 0x0002AFB4 File Offset: 0x000291B4
		public MalwareFilteringServerIdParameter(ADObjectId adObjectId) : base(adObjectId)
		{
		}

		// Token: 0x06000E87 RID: 3719 RVA: 0x0002AFBD File Offset: 0x000291BD
		public MalwareFilteringServerIdParameter(MalwareFilteringServer mfServer) : base(mfServer.Id)
		{
		}

		// Token: 0x06000E88 RID: 3720 RVA: 0x0002AFCB File Offset: 0x000291CB
		public MalwareFilteringServerIdParameter(INamedIdentity namedIdentity) : base(namedIdentity)
		{
		}

		// Token: 0x06000E89 RID: 3721 RVA: 0x0002AFD4 File Offset: 0x000291D4
		protected MalwareFilteringServerIdParameter(string identity) : base(identity)
		{
		}

		// Token: 0x1700029F RID: 671
		// (get) Token: 0x06000E8A RID: 3722 RVA: 0x0002AFDD File Offset: 0x000291DD
		protected override ServerRole RoleRestriction
		{
			get
			{
				return ServerRole.HubTransport;
			}
		}

		// Token: 0x06000E8B RID: 3723 RVA: 0x0002AFE1 File Offset: 0x000291E1
		public new static MalwareFilteringServerIdParameter Parse(string identity)
		{
			return new MalwareFilteringServerIdParameter(identity);
		}
	}
}
