using System;
using System.Collections.Generic;
using System.Reflection;
using System.Security.AccessControl;

namespace Microsoft.Exchange.Data.Directory
{
	// Token: 0x0200005B RID: 91
	[Serializable]
	internal class ADPropertyDefinition : SimpleProviderPropertyDefinition
	{
		// Token: 0x170000F3 RID: 243
		// (get) Token: 0x06000468 RID: 1128 RVA: 0x0001954F File Offset: 0x0001774F
		public string LdapDisplayName
		{
			get
			{
				return this.ldapDisplayName;
			}
		}

		// Token: 0x170000F4 RID: 244
		// (get) Token: 0x06000469 RID: 1129 RVA: 0x00019557 File Offset: 0x00017757
		public IFormatProvider FormatProvider
		{
			get
			{
				return this.formatProvider;
			}
		}

		// Token: 0x170000F5 RID: 245
		// (get) Token: 0x0600046A RID: 1130 RVA: 0x0001955F File Offset: 0x0001775F
		public SimpleProviderPropertyDefinition MServPropertyDefinition
		{
			get
			{
				return this.mservPropertyDefinition;
			}
		}

		// Token: 0x170000F6 RID: 246
		// (get) Token: 0x0600046B RID: 1131 RVA: 0x00019567 File Offset: 0x00017767
		public SimpleProviderPropertyDefinition MbxPropertyDefinition
		{
			get
			{
				return this.mbxPropertyDefinition;
			}
		}

		// Token: 0x170000F7 RID: 247
		// (get) Token: 0x0600046C RID: 1132 RVA: 0x0001956F File Offset: 0x0001776F
		public ADPropertyDefinition ShadowProperty
		{
			get
			{
				return this.shadowProperty;
			}
		}

		// Token: 0x170000F8 RID: 248
		// (get) Token: 0x0600046D RID: 1133 RVA: 0x00019577 File Offset: 0x00017777
		public ADPropertyDefinition SoftLinkShadowProperty
		{
			get
			{
				return this.softLinkShadowProperty;
			}
		}

		// Token: 0x170000F9 RID: 249
		// (get) Token: 0x0600046E RID: 1134 RVA: 0x0001957F File Offset: 0x0001777F
		public new ADPropertyDefinitionFlags Flags
		{
			get
			{
				return (ADPropertyDefinitionFlags)base.Flags;
			}
		}

		// Token: 0x170000FA RID: 250
		// (get) Token: 0x0600046F RID: 1135 RVA: 0x00019587 File Offset: 0x00017787
		public bool IncludeInProvisionalClone
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.DoNotProvisionalClone) == ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x170000FB RID: 251
		// (get) Token: 0x06000470 RID: 1136 RVA: 0x00019598 File Offset: 0x00017798
		public bool IsSoftLinkAttribute
		{
			get
			{
				return this.softLinkShadowProperty != null;
			}
		}

		// Token: 0x170000FC RID: 252
		// (get) Token: 0x06000471 RID: 1137 RVA: 0x000195A6 File Offset: 0x000177A6
		public bool IsValidateInFirstOrganization
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.ValidateInFirstOrganization) != ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x170000FD RID: 253
		// (get) Token: 0x06000472 RID: 1138 RVA: 0x000195BA File Offset: 0x000177BA
		public bool IsDoNotValidate
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.DoNotValidate) != ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x170000FE RID: 254
		// (get) Token: 0x06000473 RID: 1139 RVA: 0x000195CE File Offset: 0x000177CE
		public bool IsBackLink
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.BackLink) != ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x170000FF RID: 255
		// (get) Token: 0x06000474 RID: 1140 RVA: 0x000195E2 File Offset: 0x000177E2
		public bool IsRanged
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.Ranged) != ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x17000100 RID: 256
		// (get) Token: 0x06000475 RID: 1141 RVA: 0x000195F6 File Offset: 0x000177F6
		public bool IsValidateInSameOrganization
		{
			get
			{
				return base.Type == typeof(ADObjectId) && !this.IsValidateInFirstOrganization && !this.IsDoNotValidate && !this.IsBackLink;
			}
		}

		// Token: 0x17000101 RID: 257
		// (get) Token: 0x06000476 RID: 1142 RVA: 0x0001962A File Offset: 0x0001782A
		public bool IsValidateInSharedConfig
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.ValidateInSharedConfig) != ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x17000102 RID: 258
		// (get) Token: 0x06000477 RID: 1143 RVA: 0x0001963E File Offset: 0x0001783E
		public bool IsNonADProperty
		{
			get
			{
				return (this.Flags & ADPropertyDefinitionFlags.NonADProperty) != ADPropertyDefinitionFlags.None;
			}
		}

		// Token: 0x06000478 RID: 1144 RVA: 0x00019654 File Offset: 0x00017854
		internal static bool CanHaveAutogeneratedConstraints(ADPropertyDefinition propertyDefinition)
		{
			return propertyDefinition != null && (!propertyDefinition.IsNonADProperty && !propertyDefinition.HasAutogeneratedConstraints && !propertyDefinition.IsFilterOnly && !propertyDefinition.IsCalculated && !propertyDefinition.IsReadOnly && !propertyDefinition.IsTaskPopulated) && !string.IsNullOrEmpty(propertyDefinition.LdapDisplayName);
		}

		// Token: 0x06000479 RID: 1145 RVA: 0x000196A8 File Offset: 0x000178A8
		internal ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, IFormatProvider formatProvider, string ldapDisplayName, string shadowLdapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, ProviderPropertyDefinition[] supportingProperties, CustomFilterBuilderDelegate customFilterBuilderDelegate, GetterDelegate getterDelegate, SetterDelegate setterDelegate, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, formatProvider, ldapDisplayName, shadowLdapDisplayName, null, flags, defaultValue, readConstraints, writeConstraints, supportingProperties, customFilterBuilderDelegate, getterDelegate, setterDelegate, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x0600047A RID: 1146 RVA: 0x000196DC File Offset: 0x000178DC
		internal ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, IFormatProvider formatProvider, string ldapDisplayName, string shadowLdapDisplayName, string softLinkLdapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, ProviderPropertyDefinition[] supportingProperties, CustomFilterBuilderDelegate customFilterBuilderDelegate, GetterDelegate getterDelegate, SetterDelegate setterDelegate, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : base(name, versionAdded, type, (PropertyDefinitionFlags)flags, defaultValue, readConstraints, writeConstraints, supportingProperties, customFilterBuilderDelegate, getterDelegate, setterDelegate)
		{
			this.formatProvider = formatProvider;
			this.ldapDisplayName = ldapDisplayName;
			this.mservPropertyDefinition = mservPropertyDefinition;
			this.mbxPropertyDefinition = mbxPropertyDefinition;
			if (string.IsNullOrEmpty(this.LdapDisplayName))
			{
				if (!this.IsCalculated && !this.IsTaskPopulated && !this.IsNonADProperty)
				{
					throw new ArgumentException(base.Name + ": Non-calculated properties must have LdapDisplayName", "ldapDisplayName");
				}
			}
			else
			{
				if (this.IsCalculated && base.CustomFilterBuilderDelegate != new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate))
				{
					throw new ArgumentException(base.Name + ": Calculated properties should not contain an LdapDisplayName, unless it is the DummyCustomFilterBuilderDelegate.", "ldapDisplayName");
				}
				if (this.IsTaskPopulated)
				{
					throw new ArgumentException(base.Name + ": TaskPopulated properties should not contain an LdapDisplayName.", "ldapDisplayName");
				}
			}
			if (!this.IsMultivalued && !this.IsFilterOnly && !this.IsCalculated && !this.IsMandatory && base.Type == typeof(string) && !string.Empty.Equals(base.DefaultValue))
			{
				throw new ArgumentException(base.Name + ": Non-mandatory string properties must have default value String.Empty. Found " + (base.DefaultValue ?? "<null>"), "defaultValue");
			}
			if (this.IsValidateInFirstOrganization || this.IsDoNotValidate || this.IsBackLink)
			{
				if ((this.IsValidateInFirstOrganization && this.IsDoNotValidate) || (this.IsDoNotValidate && this.IsBackLink) || (this.IsValidateInFirstOrganization && this.IsBackLink))
				{
					throw new ArgumentException(base.Name + ": Only one of the three property definition flags - ValidateInFirstOrganization, DoNotValidate and BackLink can be set in parameter flags");
				}
				if (base.Type != typeof(ADObjectId))
				{
					throw new ArgumentException(base.Name + ": If ValidateInFirstOrganization, DoNotValidate or BackLink is set for parameter flags, the property type MUST be ADObjectId");
				}
			}
			if (this.IsRanged && (!this.IsMultivalued || string.IsNullOrEmpty(this.ldapDisplayName) || !this.IsReadOnly))
			{
				throw new ArgumentException(base.Name + ": Only multivalued non calculated properties can be ranged.");
			}
			if (!string.IsNullOrEmpty(this.ldapDisplayName) && this.IsRanged != this.ldapDisplayName.ToLower().Contains(";range="))
			{
				throw new ArgumentException(base.Name + ": Ranged property needs to define range in ldapName.");
			}
			if (!string.IsNullOrEmpty(shadowLdapDisplayName))
			{
				if (this.IsCalculated || this.IsReadOnly || this.IsFilterOnly || this.IsTaskPopulated || this.IsSoftLinkAttribute)
				{
					throw new ArgumentException(base.Name + ": Calculated, ReadOnly, FilterOnly, SoftLink, or TaskPopulated properties may not have shadows");
				}
				Type type2;
				ADPropertyDefinitionFlags flags2;
				object defaultValue2;
				if (type.GetTypeInfo().IsValueType && (flags & ADPropertyDefinitionFlags.PersistDefaultValue) == ADPropertyDefinitionFlags.PersistDefaultValue)
				{
					Type typeFromHandle = typeof(Nullable<>);
					type2 = typeFromHandle.MakeGenericType(new Type[]
					{
						type
					});
					flags2 = (flags & ~ADPropertyDefinitionFlags.PersistDefaultValue);
					defaultValue2 = null;
				}
				else
				{
					type2 = type;
					flags2 = flags;
					defaultValue2 = defaultValue;
				}
				this.shadowProperty = new ADPropertyDefinition(string.Format("Shadow{0}", name), ExchangeObjectVersion.Exchange2003, type2, formatProvider, shadowLdapDisplayName, null, null, flags2, defaultValue2, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);
			}
			if (!string.IsNullOrEmpty(softLinkLdapDisplayName))
			{
				if (this.IsCalculated || this.IsReadOnly || this.IsFilterOnly || this.IsTaskPopulated)
				{
					throw new ArgumentException(base.Name + ": Calculated, ReadOnly, FilterOnly, or TaskPopulated properties may not have soft links");
				}
				Type typeFromHandle2 = typeof(byte[]);
				ADPropertyDefinitionFlags flags3 = ADPropertyDefinitionFlags.Binary;
				this.softLinkShadowProperty = new ADPropertyDefinition(string.Format("{0}_sl", name), ExchangeObjectVersion.Exchange2003, typeFromHandle2, formatProvider, softLinkLdapDisplayName, null, null, flags3, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);
			}
		}

		// Token: 0x0600047B RID: 1147 RVA: 0x00019A9C File Offset: 0x00017C9C
		internal ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, IFormatProvider formatProvider, string ldapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, ProviderPropertyDefinition[] supportingProperties, CustomFilterBuilderDelegate customFilterBuilderDelegate, GetterDelegate getterDelegate, SetterDelegate setterDelegate, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, formatProvider, ldapDisplayName, null, null, flags, defaultValue, readConstraints, writeConstraints, supportingProperties, customFilterBuilderDelegate, getterDelegate, setterDelegate, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x0600047C RID: 1148 RVA: 0x00019ACC File Offset: 0x00017CCC
		internal ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, string ldapDisplayName, string shadowLdapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, ProviderPropertyDefinition[] supportingProperties, CustomFilterBuilderDelegate customFilterBuilderDelegate, GetterDelegate getterDelegate, SetterDelegate setterDelegate, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, null, ldapDisplayName, shadowLdapDisplayName, flags, defaultValue, readConstraints, writeConstraints, supportingProperties, customFilterBuilderDelegate, getterDelegate, setterDelegate, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x0600047D RID: 1149 RVA: 0x00019AFC File Offset: 0x00017CFC
		internal ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, string ldapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, ProviderPropertyDefinition[] supportingProperties, CustomFilterBuilderDelegate customFilterBuilderDelegate, GetterDelegate getterDelegate, SetterDelegate setterDelegate, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, null, ldapDisplayName, null, flags, defaultValue, readConstraints, writeConstraints, supportingProperties, customFilterBuilderDelegate, getterDelegate, setterDelegate, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x0600047E RID: 1150 RVA: 0x00019B2C File Offset: 0x00017D2C
		public ADPropertyDefinition(string name, string shadowName, ExchangeObjectVersion versionAdded, Type type, IFormatProvider formatProvider, string ldapDisplayName, string shadowLdapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, formatProvider, ldapDisplayName, shadowLdapDisplayName, flags, defaultValue, readConstraints, writeConstraints, SimpleProviderPropertyDefinition.None, null, null, null, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x0600047F RID: 1151 RVA: 0x00019B60 File Offset: 0x00017D60
		public ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, IFormatProvider formatProvider, string ldapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, formatProvider, ldapDisplayName, null, flags, defaultValue, readConstraints, writeConstraints, SimpleProviderPropertyDefinition.None, null, null, null, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x06000480 RID: 1152 RVA: 0x00019B90 File Offset: 0x00017D90
		public ADPropertyDefinition(string name, string shadowName, ExchangeObjectVersion versionAdded, Type type, string ldapDisplayName, string shadowLdapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, null, ldapDisplayName, shadowLdapDisplayName, flags, defaultValue, readConstraints, writeConstraints, SimpleProviderPropertyDefinition.None, null, null, null, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x06000481 RID: 1153 RVA: 0x00019BC0 File Offset: 0x00017DC0
		public ADPropertyDefinition(string name, ExchangeObjectVersion versionAdded, Type type, string ldapDisplayName, ADPropertyDefinitionFlags flags, object defaultValue, PropertyDefinitionConstraint[] readConstraints, PropertyDefinitionConstraint[] writeConstraints, SimpleProviderPropertyDefinition mservPropertyDefinition = null, SimpleProviderPropertyDefinition mbxPropertyDefinition = null) : this(name, versionAdded, type, null, ldapDisplayName, null, flags, defaultValue, readConstraints, writeConstraints, SimpleProviderPropertyDefinition.None, null, null, null, mservPropertyDefinition, mbxPropertyDefinition)
		{
		}

		// Token: 0x06000482 RID: 1154 RVA: 0x00019BF0 File Offset: 0x00017DF0
		public override bool Equals(ProviderPropertyDefinition other)
		{
			if (object.ReferenceEquals(other, this))
			{
				return true;
			}
			ADPropertyDefinition adpropertyDefinition = other as ADPropertyDefinition;
			return adpropertyDefinition != null && StringComparer.OrdinalIgnoreCase.Equals(adpropertyDefinition.LdapDisplayName, this.LdapDisplayName) && base.Equals(other);
		}

		// Token: 0x06000483 RID: 1155 RVA: 0x00019C38 File Offset: 0x00017E38
		public override int GetHashCode()
		{
			if (this.hashcode == 0)
			{
				int num = base.Name.GetHashCodeCaseInsensitive();
				if (string.Compare(base.Name, this.ldapDisplayName, StringComparison.OrdinalIgnoreCase) != 0)
				{
					num ^= ((this.ldapDisplayName == null) ? 0 : this.ldapDisplayName.GetHashCodeCaseInsensitive());
				}
				this.hashcode = num;
			}
			return this.hashcode;
		}

		// Token: 0x17000103 RID: 259
		// (get) Token: 0x06000484 RID: 1156 RVA: 0x00019C93 File Offset: 0x00017E93
		public override bool IsFilterable
		{
			get
			{
				return (this.IsCalculated || !string.IsNullOrEmpty(this.LdapDisplayName)) && base.IsFilterable;
			}
		}

		// Token: 0x17000104 RID: 260
		// (get) Token: 0x06000485 RID: 1157 RVA: 0x00019CB4 File Offset: 0x00017EB4
		public bool IsForestSpecific
		{
			get
			{
				return !this.IsSoftLinkAttribute && ((base.Type == typeof(ADObjectId) && this != ADObjectSchema.Id) || base.Type == typeof(ADObjectIdWithString) || base.Type == typeof(RawSecurityDescriptor) || base.Type == typeof(DNWithBinary) || (this.Flags & ADPropertyDefinitionFlags.ForestSpecific) != ADPropertyDefinitionFlags.None);
			}
		}

		// Token: 0x06000486 RID: 1158 RVA: 0x00019E08 File Offset: 0x00018008
		public static GetterDelegate RawStringGetterIgnoringInvalid<TConverted>(ADPropertyDefinition rawPropertyDefinition, ADPropertyDefinition convertedPropertyDefinition)
		{
			if (!rawPropertyDefinition.IsMultivalued)
			{
				throw new NotImplementedException("RawStringGetterIgnoringInvalid is only currently implemented for multi-valued properties.");
			}
			return delegate(IPropertyBag bag)
			{
				MultiValuedProperty<string> multiValuedProperty = (MultiValuedProperty<string>)bag[rawPropertyDefinition];
				MultiValuedProperty<TConverted> result = null;
				List<TConverted> list = new List<TConverted>();
				bool flag = false;
				foreach (string originalValue in multiValuedProperty)
				{
					object obj;
					Exception ex;
					if (ADValueConvertor.TryConvertValueFromString(originalValue, typeof(TConverted), rawPropertyDefinition.FormatProvider, out obj, out ex))
					{
						list.Add((TConverted)((object)obj));
					}
					else
					{
						flag = true;
					}
				}
				if (!flag && list.Count != 0)
				{
					result = new MultiValuedProperty<TConverted>(rawPropertyDefinition.IsReadOnly, convertedPropertyDefinition, list);
				}
				return result;
			};
		}

		// Token: 0x06000487 RID: 1159 RVA: 0x00019EE4 File Offset: 0x000180E4
		public static SetterDelegate RawStringSetter<TConverted>(ADPropertyDefinition rawPropertyDefinition)
		{
			if (!rawPropertyDefinition.IsMultivalued)
			{
				throw new NotImplementedException("RawStringSetter is only currently implemented for multi-valued properties.");
			}
			return delegate(object value, IPropertyBag bag)
			{
				MultiValuedProperty<TConverted> multiValuedProperty = (MultiValuedProperty<TConverted>)value;
				MultiValuedProperty<string> multiValuedProperty2 = null;
				if (multiValuedProperty != null && multiValuedProperty.Count != 0)
				{
					multiValuedProperty2 = new MultiValuedProperty<string>();
					foreach (TConverted tconverted in multiValuedProperty)
					{
						multiValuedProperty2.Add(ADValueConvertor.ConvertValueToString(tconverted, rawPropertyDefinition.FormatProvider));
					}
				}
				bag[rawPropertyDefinition] = multiValuedProperty2;
			};
		}

		// Token: 0x040001A5 RID: 421
		private string ldapDisplayName;

		// Token: 0x040001A6 RID: 422
		private IFormatProvider formatProvider;

		// Token: 0x040001A7 RID: 423
		protected ADPropertyDefinition shadowProperty;

		// Token: 0x040001A8 RID: 424
		protected ADPropertyDefinition softLinkShadowProperty;

		// Token: 0x040001A9 RID: 425
		private SimpleProviderPropertyDefinition mservPropertyDefinition;

		// Token: 0x040001AA RID: 426
		private SimpleProviderPropertyDefinition mbxPropertyDefinition;
	}
}
