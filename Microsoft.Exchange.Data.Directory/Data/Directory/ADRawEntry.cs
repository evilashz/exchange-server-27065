using System;
using Microsoft.Exchange.Common;

namespace Microsoft.Exchange.Data.Directory
{
	// Token: 0x0200001F RID: 31
	[Serializable]
	public class ADRawEntry : ConfigurableObject, ICloneable, IADRawEntry, IConfigurable, IPropertyBag, IReadOnlyPropertyBag
	{
		// Token: 0x1700005F RID: 95
		// (get) Token: 0x060001C5 RID: 453 RVA: 0x0000BF3D File Offset: 0x0000A13D
		// (set) Token: 0x060001C6 RID: 454 RVA: 0x0000BF45 File Offset: 0x0000A145
		internal ADPropertyBag MservPropertyBag { get; set; }

		// Token: 0x17000060 RID: 96
		// (get) Token: 0x060001C7 RID: 455 RVA: 0x0000BF4E File Offset: 0x0000A14E
		// (set) Token: 0x060001C8 RID: 456 RVA: 0x0000BF56 File Offset: 0x0000A156
		internal ADPropertyBag MbxPropertyBag { get; set; }

		// Token: 0x060001C9 RID: 457 RVA: 0x0000BF5F File Offset: 0x0000A15F
		public ADRawEntry() : base(new ADPropertyBag())
		{
		}

		// Token: 0x060001CA RID: 458 RVA: 0x0000BF6C File Offset: 0x0000A16C
		internal ADRawEntry(ADPropertyBag propertyBag) : base(propertyBag)
		{
		}

		// Token: 0x17000061 RID: 97
		// (get) Token: 0x060001CB RID: 459 RVA: 0x0000BF75 File Offset: 0x0000A175
		internal override ObjectSchema ObjectSchema
		{
			get
			{
				return null;
			}
		}

		// Token: 0x17000062 RID: 98
		// (get) Token: 0x060001CC RID: 460 RVA: 0x0000BF78 File Offset: 0x0000A178
		public ADObjectId Id
		{
			get
			{
				return (ADObjectId)this.propertyBag[ADObjectSchema.Id];
			}
		}

		// Token: 0x060001CD RID: 461 RVA: 0x0000BF90 File Offset: 0x0000A190
		internal override void InitializeSchema()
		{
			base.InitializeSchema();
			ADObjectSchema adobjectSchema = this.ObjectSchema as ADObjectSchema;
			if (adobjectSchema != null)
			{
				adobjectSchema.InitializeAutogeneratedConstraints();
			}
		}

		// Token: 0x060001CE RID: 462 RVA: 0x0000BFB8 File Offset: 0x0000A1B8
		internal void SetId(ADObjectId valueToSet)
		{
			if (valueToSet == null)
			{
				throw new ArgumentNullException("valueToSet");
			}
			if (string.IsNullOrEmpty(valueToSet.DistinguishedName))
			{
				throw new ArgumentException(DirectoryStrings.ErrorEmptyString("valueToSet.DistinguishedName"), "valueToSet");
			}
			this.propertyBag.SetField(ADObjectSchema.Id, valueToSet);
		}

		// Token: 0x17000063 RID: 99
		// (get) Token: 0x060001CF RID: 463 RVA: 0x0000C00C File Offset: 0x0000A20C
		// (set) Token: 0x060001D0 RID: 464 RVA: 0x0000C02B File Offset: 0x0000A22B
		public string OriginatingServer
		{
			get
			{
				return (string)this[ADObjectSchema.OriginatingServer];
			}
			internal set
			{
				this.propertyBag.SetField(ADObjectSchema.OriginatingServer, value);
			}
		}

		// Token: 0x17000064 RID: 100
		// (get) Token: 0x060001D1 RID: 465 RVA: 0x0000C040 File Offset: 0x0000A240
		// (set) Token: 0x060001D2 RID: 466 RVA: 0x0000C05F File Offset: 0x0000A25F
		internal DateTime? WhenReadUTC
		{
			get
			{
				return (DateTime?)this[ADObjectSchema.WhenReadUTC];
			}
			set
			{
				this.propertyBag.SetField(ADObjectSchema.WhenReadUTC, value);
			}
		}

		// Token: 0x17000065 RID: 101
		// (get) Token: 0x060001D3 RID: 467 RVA: 0x0000C078 File Offset: 0x0000A278
		// (set) Token: 0x060001D4 RID: 468 RVA: 0x0000C08A File Offset: 0x0000A28A
		internal bool IsCached
		{
			get
			{
				return (bool)this[ADObjectSchema.IsCached];
			}
			set
			{
				this.propertyBag.SetField(ADObjectSchema.IsCached, BoxedConstants.GetBool(value));
			}
		}

		// Token: 0x17000066 RID: 102
		// (get) Token: 0x060001D5 RID: 469 RVA: 0x0000C0A3 File Offset: 0x0000A2A3
		// (set) Token: 0x060001D6 RID: 470 RVA: 0x0000C0B5 File Offset: 0x0000A2B5
		internal DirectoryBackendType DirectoryBackendType
		{
			get
			{
				return (DirectoryBackendType)this[ADObjectSchema.DirectoryBackendType];
			}
			set
			{
				this.propertyBag.SetField(ADObjectSchema.DirectoryBackendType, value);
			}
		}

		// Token: 0x060001D7 RID: 471 RVA: 0x0000C0CE File Offset: 0x0000A2CE
		internal string GetDistinguishedNameOrName()
		{
			if (this.Id == null)
			{
				return (string)this[ADObjectSchema.Name];
			}
			return this.Id.DistinguishedName;
		}
	}
}
