using System;
using System.Collections.Generic;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x02000038 RID: 56
	internal class MalwareFingerPrintDetails
	{
		// Token: 0x1700004F RID: 79
		// (get) Token: 0x0600014E RID: 334 RVA: 0x00009EA2 File Offset: 0x000080A2
		// (set) Token: 0x0600014F RID: 335 RVA: 0x00009EAA File Offset: 0x000080AA
		public string Name { get; set; }

		// Token: 0x17000050 RID: 80
		// (get) Token: 0x06000150 RID: 336 RVA: 0x00009EB3 File Offset: 0x000080B3
		// (set) Token: 0x06000151 RID: 337 RVA: 0x00009EBB File Offset: 0x000080BB
		public string[] Detections { get; set; }

		// Token: 0x17000051 RID: 81
		// (get) Token: 0x06000152 RID: 338 RVA: 0x00009EC4 File Offset: 0x000080C4
		// (set) Token: 0x06000153 RID: 339 RVA: 0x00009ECC File Offset: 0x000080CC
		public long Size { get; set; }

		// Token: 0x17000052 RID: 82
		// (get) Token: 0x06000154 RID: 340 RVA: 0x00009ED5 File Offset: 0x000080D5
		// (set) Token: 0x06000155 RID: 341 RVA: 0x00009EDD File Offset: 0x000080DD
		public MalwareFingerPrint LowFidelitySHA256Hash { get; set; }

		// Token: 0x17000053 RID: 83
		// (get) Token: 0x06000156 RID: 342 RVA: 0x00009EE6 File Offset: 0x000080E6
		// (set) Token: 0x06000157 RID: 343 RVA: 0x00009EEE File Offset: 0x000080EE
		public MalwareFingerPrint HighFidelitySHA256Hash { get; set; }

		// Token: 0x06000158 RID: 344 RVA: 0x00009EF7 File Offset: 0x000080F7
		public bool IsLowFidelityMatch(MalwareFingerPrintDetails matchWith)
		{
			return this.Size == matchWith.Size && this.LowFidelitySHA256Hash.Equals(matchWith.LowFidelitySHA256Hash);
		}

		// Token: 0x06000159 RID: 345 RVA: 0x00009F1D File Offset: 0x0000811D
		public bool IsHighFidelityMatch(MalwareFingerPrintDetails matchWith)
		{
			return this.Size == matchWith.Size && this.HighFidelitySHA256Hash.Equals(matchWith.HighFidelitySHA256Hash);
		}

		// Token: 0x0600015A RID: 346 RVA: 0x00009F44 File Offset: 0x00008144
		public List<KeyValuePair<string, string>> GetVerdictInfo()
		{
			return new List<KeyValuePair<string, string>>
			{
				new KeyValuePair<string, string>("file", this.Name),
				new KeyValuePair<string, string>("names", string.Join(",", this.Detections))
			};
		}

		// Token: 0x02000039 RID: 57
		private class KeyNames
		{
			// Token: 0x0400014C RID: 332
			public const string FileName = "file";

			// Token: 0x0400014D RID: 333
			public const string Detections = "names";
		}
	}
}
