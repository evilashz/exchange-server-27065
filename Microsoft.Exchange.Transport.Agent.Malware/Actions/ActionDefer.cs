using System;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Data.Mime;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.Transport.Agent.Malware.Common;

namespace Microsoft.Exchange.Transport.Agent.Malware.Actions
{
	// Token: 0x02000004 RID: 4
	internal class ActionDefer : Action
	{
		// Token: 0x0600000B RID: 11 RVA: 0x00002A8C File Offset: 0x00000C8C
		public ActionDefer()
		{
			this.finalAction = typeof(ActionDeferForever);
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002AA4 File Offset: 0x00000CA4
		public ActionDefer(Type finalAction)
		{
			if (finalAction.GetType() == typeof(ActionDefer))
			{
				throw new ArgumentException("The action taken when there are no more deferrals left for a message cannot be ActionDefer.");
			}
			this.finalAction = finalAction;
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002AD8 File Offset: 0x00000CD8
		public override void Execute(ScanContext context, SubmittedMessageEventSource source, QueuedMessageEventArgs args)
		{
			ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Begin ActionDefer.Execute.");
			Header header = args.MailItem.Message.RootPart.Headers.FindFirst("X-MS-Exchange-Organization-Deferred-Tracking");
			if (header == null)
			{
				StampDefer stampDefer = this.CreateNewStamp(context);
				try
				{
					args.MailItem.Message.RootPart.Headers.AppendChild(new TextHeader("X-MS-Exchange-Organization-Deferred-Tracking", stampDefer.ToString()));
				}
				catch (InvalidOperationException)
				{
					ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Failed to add Defer stamp");
				}
				MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_MessageDeferred, null, new object[]
				{
					args.MailItem.Message.MessageId,
					args.MailItem.Message.Date,
					args.MailItem.FromAddress,
					args.MailItem.MimeStreamLength,
					stampDefer.DeferredCount
				});
				context.ScanActionExecuted = ScanAction.Deferred;
				base.TrackMalwareAgentInfo(context, source);
				source.Defer(stampDefer.WaitTime);
				return;
			}
			StampDefer stampDefer2;
			if (!StampDefer.TryParse(header.Value, (context.OverrideWaitTime.TotalMinutes == 0.0) ? ((double)context.AgentGlobal.ServerSettings.DeferWaitTime) : context.OverrideWaitTime.TotalMinutes, out stampDefer2))
			{
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Defer stamp could not be parsed.");
				return;
			}
			if (this.AreAnyDeferralsLeft(stampDefer2, context))
			{
				this.UpdateStamp(stampDefer2);
				stampDefer2.NextDefer(context.AgentGlobal.ServerSettings.DeferAttempts, context.IsCrashRecoverable || stampDefer2.IsCrashRecoverable, context.IsTimeoutRecoverable || stampDefer2.IsTimeoutRecoverable);
				header.Value = stampDefer2.ToString();
				MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_MessageDeferred, null, new object[]
				{
					args.MailItem.Message.MessageId,
					args.MailItem.Message.Date,
					args.MailItem.FromAddress,
					args.MailItem.MimeStreamLength,
					stampDefer2.DeferredCount
				});
				context.ScanActionExecuted = ScanAction.Deferred;
				base.TrackMalwareAgentInfo(context, source);
				source.Defer(stampDefer2.WaitTime);
				return;
			}
			if (context.AgentGlobal.ServerSettings.ScanErrorAction == MalwareScanErrorAction.Allow)
			{
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Bypass scanning for business continuity.");
				context.ScanActionExecuted = ScanAction.Skipped;
				context.ScanStatus = ScanStatus.Bypassed;
				base.TrackMalwareAgentInfo(context, source);
				return;
			}
			((Action)Activator.CreateInstance(stampDefer2.FinalActionType)).Execute(context, source, args);
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00002DD0 File Offset: 0x00000FD0
		protected virtual bool AreAnyDeferralsLeft(StampDefer stamp, ScanContext context)
		{
			return stamp.DeferredCount < context.AgentGlobal.ServerSettings.DeferAttempts;
		}

		// Token: 0x0600000F RID: 15 RVA: 0x00002DEA File Offset: 0x00000FEA
		protected virtual void UpdateStamp(StampDefer stamp)
		{
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00002DEC File Offset: 0x00000FEC
		protected virtual StampDefer CreateNewStamp(ScanContext context)
		{
			double num = (context.OverrideWaitTime.TotalMinutes == 0.0) ? ((double)context.AgentGlobal.ServerSettings.DeferWaitTime) : context.OverrideWaitTime.TotalMinutes;
			double waitTimeMinutes = Math.Min(num, Constants.MinutesPerDay);
			return new StampDefer(1, context.AgentGlobal.ServerSettings.DeferAttempts, num, StampDefer.GetRandomizedWaitTime(waitTimeMinutes), this.finalAction, context.IsCrashRecoverable, context.IsTimeoutRecoverable);
		}

		// Token: 0x04000002 RID: 2
		private Type finalAction;
	}
}
