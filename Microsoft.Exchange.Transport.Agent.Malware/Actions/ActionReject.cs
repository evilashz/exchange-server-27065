using System;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Data.Transport.Smtp;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Filtering;
using Microsoft.Office.Datacenter.ActiveMonitoring;

namespace Microsoft.Exchange.Transport.Agent.Malware.Actions
{
	// Token: 0x02000008 RID: 8
	internal class ActionReject : Action
	{
		// Token: 0x0600001A RID: 26 RVA: 0x00002FD6 File Offset: 0x000011D6
		public ActionReject() : this(true)
		{
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00002FDF File Offset: 0x000011DF
		public ActionReject(bool isMalwareAgentIssue = true)
		{
			this.isMalwareAgentIssue = isMalwareAgentIssue;
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00002FF0 File Offset: 0x000011F0
		public override void Execute(ScanContext context, SubmittedMessageEventSource source, QueuedMessageEventArgs args)
		{
			ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Begin ActionReject.Execute.");
			TransportMailItem transportMailItem = MalwareAgentGlobal.GetTransportMailItem(args.MailItem);
			ExTraceGlobals.ActionsTracer.TraceDebug<string, string>((long)this.GetHashCode(), "Anti-Malware agent rejected the message with {0}. Reason: {1}", (transportMailItem != null) ? string.Format("ExMessageId = {0}", transportMailItem.NetworkMessageId) : string.Format("MessageId = {0}", args.MailItem.Message.MessageId), context.ErrorDetails ?? string.Empty);
			context.ScanActionExecuted = ScanAction.Rejected;
			if (this.isMalwareAgentIssue)
			{
				EventNotificationItem.Publish(ExchangeComponent.AMScanError.Name, "AntimalwareAgent.NDR", null, string.Format("Anti-Malware agent rejected the message with {0}. Reason: {1}", (transportMailItem != null) ? string.Format("ExMessageId = {0}", transportMailItem.NetworkMessageId) : string.Format("MessageId = {0}", args.MailItem.Message.MessageId), context.ErrorDetails ?? string.Empty), ResultSeverityLevel.Error, false);
				context.ScanStatus |= ScanStatus.RejectedInternalError;
			}
			else
			{
				context.ScanStatus |= ScanStatus.RejectedExternalError;
			}
			base.TrackMalwareAgentInfo(context, source);
			AgentUtils.NdrMessage(args.MailItem, ActionReject.InvalidContentResponse);
		}

		// Token: 0x04000005 RID: 5
		private static readonly SmtpResponse InvalidContentResponse = new SmtpResponse("554", "5.6.0", new string[]
		{
			"Invalid message content identified by Antimalware Agent"
		});

		// Token: 0x04000006 RID: 6
		private readonly bool isMalwareAgentIssue;
	}
}
