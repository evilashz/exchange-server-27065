using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using Microsoft.Exchange.Data.Transport.Email;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.UnifiedContent;
using Microsoft.Filtering;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x0200003C RID: 60
	internal class MalwareFingerPrintManager : IDisposable
	{
		// Token: 0x0600016C RID: 364 RVA: 0x0000A234 File Offset: 0x00008434
		public MalwareFingerPrintManager()
		{
			string value = ConfigurationManager.AppSettings["EnableMalwareFingerPrinting"];
			if (!string.IsNullOrEmpty(value) && Convert.ToBoolean(value))
			{
				this.enableFingerPrinting = true;
			}
			if (this.enableFingerPrinting)
			{
				this.cache = MalwareFingerPrintCache.GetInstance();
				this.cachePerfCounterUpdater = new Timer(new TimerCallback(this.UpdateCachePerfCounters), null, TimeSpan.FromSeconds(30.0), TimeSpan.FromSeconds(30.0));
			}
			this.ResetCachePerfCounters();
		}

		// Token: 0x0600016D RID: 365 RVA: 0x0000A2E4 File Offset: 0x000084E4
		public void AddFingerPrint(EmailMessage item, FilteringResults malwareResults, MalwareFingerPrintDetails olderFingerPrint)
		{
			if (!this.enableFingerPrinting)
			{
				return;
			}
			try
			{
				ContentManager contentManager = (ContentManager)ContentManagerFactory.ExtractContentManager(item);
				List<IExtractedContent> contentCollection = contentManager.ContentCollection;
				if (contentCollection != null)
				{
					IEnumerable<ScanResult> source = from scanResult in malwareResults.ScanResults
					where scanResult.Detections.Count != 0
					select scanResult;
					if (source.Count<ScanResult>() != 0)
					{
						IEnumerable<IGrouping<int, ScanResult>> enumerable = from scanResult in source
						group scanResult by scanResult.Stream.Id;
						foreach (IGrouping<int, ScanResult> grouping in enumerable)
						{
							SharedContent sharedContent = contentCollection.ElementAt(grouping.Key - 1) as SharedContent;
							if (sharedContent != null && sharedContent.LowFidelityHash != null && sharedContent.LowFidelityHash.Length != 0)
							{
								ScanResult scanResult2 = grouping.FirstOrDefault<ScanResult>();
								MalwareFingerPrintDetails malwareFingerPrintDetails = new MalwareFingerPrintDetails();
								malwareFingerPrintDetails.Name = scanResult2.Stream.Name;
								malwareFingerPrintDetails.Size = sharedContent.Rawsize;
								malwareFingerPrintDetails.Detections = (from detection in scanResult2.Detections
								select detection.Name).ToArray<string>();
								malwareFingerPrintDetails.LowFidelitySHA256Hash = new MalwareFingerPrint(sharedContent.LowFidelityHash);
								if (olderFingerPrint == null || !olderFingerPrint.IsLowFidelityMatch(malwareFingerPrintDetails))
								{
									if (sharedContent.HighFidelityHash == null || sharedContent.HighFidelityHash.Length == 0)
									{
										ExTraceGlobals.FingerPrintTracer.TraceDebug((long)this.GetHashCode(), "Failed to compute HighFidelity finger print hash");
									}
									else
									{
										malwareFingerPrintDetails.HighFidelitySHA256Hash = new MalwareFingerPrint(sharedContent.HighFidelityHash);
										this.cache.Add(malwareFingerPrintDetails.LowFidelitySHA256Hash, malwareFingerPrintDetails);
									}
								}
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				if (ex is OutOfMemoryException || ex is ThreadAbortException || ex is AccessViolationException || ex is SEHException)
				{
					throw;
				}
				ExTraceGlobals.FingerPrintTracer.TraceDebug<Exception>((long)this.GetHashCode(), "Failed to add in finger print cache: {0}", ex);
			}
		}

		// Token: 0x0600016E RID: 366 RVA: 0x0000A528 File Offset: 0x00008728
		public MalwareFingerPrintDetails GetFingerPrint(EmailMessage item)
		{
			if (!this.enableFingerPrinting)
			{
				return null;
			}
			ContentManager contentManager = (ContentManager)ContentManagerFactory.ExtractContentManager(item);
			List<IExtractedContent> contentCollection = contentManager.ContentCollection;
			if (contentCollection == null)
			{
				return null;
			}
			foreach (IExtractedContent extractedContent in contentCollection)
			{
				SharedContent sharedContent = extractedContent as SharedContent;
				if (sharedContent != null && sharedContent.LowFidelityHash != null && sharedContent.LowFidelityHash.Length != 0)
				{
					MalwareFingerPrintDetails malwareFingerPrintDetails = this.cache.Get(new MalwareFingerPrint(sharedContent.LowFidelityHash));
					if (malwareFingerPrintDetails != null)
					{
						if (this.ValidateMalwareFingerPrint(malwareFingerPrintDetails, sharedContent))
						{
							MalwareAgentDatacenterPerfCounters.FingerPrintingCacheHit.Increment();
							return malwareFingerPrintDetails;
						}
						MalwareAgentDatacenterPerfCounters.FingerPrintingCacheLowFidelityMiss.Increment();
					}
				}
			}
			return null;
		}

		// Token: 0x0600016F RID: 367 RVA: 0x0000A5F8 File Offset: 0x000087F8
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		// Token: 0x06000170 RID: 368 RVA: 0x0000A607 File Offset: 0x00008807
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && !this.disposed)
			{
				if (this.cachePerfCounterUpdater != null)
				{
					this.cachePerfCounterUpdater.Dispose();
					this.cachePerfCounterUpdater = null;
				}
				this.ResetCachePerfCounters();
				this.disposed = true;
			}
		}

		// Token: 0x06000171 RID: 369 RVA: 0x0000A63B File Offset: 0x0000883B
		private void UpdateCachePerfCounters(object state)
		{
			MalwareAgentDatacenterPerfCounters.ItemsInFingerPrintingCache.RawValue = this.cache.Count;
		}

		// Token: 0x06000172 RID: 370 RVA: 0x0000A652 File Offset: 0x00008852
		private void ResetCachePerfCounters()
		{
			MalwareAgentDatacenterPerfCounters.FingerPrintingCacheLowFidelityMiss.Reset();
			MalwareAgentDatacenterPerfCounters.FingerPrintingCacheHit.Reset();
			MalwareAgentDatacenterPerfCounters.ItemsInFingerPrintingCache.Reset();
		}

		// Token: 0x06000173 RID: 371 RVA: 0x0000A672 File Offset: 0x00008872
		private bool ValidateMalwareFingerPrint(MalwareFingerPrintDetails fingerPrint, SharedContent sharedContent)
		{
			return fingerPrint.Size == sharedContent.Rawsize && sharedContent.HighFidelityHash != null && sharedContent.HighFidelityHash.Length != 0 && new MalwareFingerPrint(sharedContent.HighFidelityHash).Equals(fingerPrint.HighFidelitySHA256Hash);
		}

		// Token: 0x04000158 RID: 344
		private readonly bool enableFingerPrinting;

		// Token: 0x04000159 RID: 345
		private MalwareFingerPrintCache cache;

		// Token: 0x0400015A RID: 346
		private Timer cachePerfCounterUpdater;

		// Token: 0x0400015B RID: 347
		private bool disposed;
	}
}
