using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Filtering;
using Microsoft.Filtering.Results;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x02000026 RID: 38
	internal class MalwareResultLogger
	{
		// Token: 0x060000D2 RID: 210 RVA: 0x00008D28 File Offset: 0x00006F28
		public static List<KeyValuePair<string, string>> GetVerdictInfo(ScanContext ctx)
		{
			List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>();
			string value = string.Empty;
			if (ctx.Results != null)
			{
				int value2 = ResultsExtensions.HasDetectionForType(ctx.Results, 3) ? 1 : 0;
				if (ResultsExtensions.HasEngineErrorForType(ctx.Results, 3) || ResultsExtensions.HasPipelineError(ctx.Results))
				{
					value2 = 2;
					value = "ScanError";
				}
				list.Add(new KeyValuePair<string, string>("v", Convert.ToString(value2)));
			}
			if (ScanStatus.TimedOut == (ctx.ScanStatus & ScanStatus.TimedOut))
			{
				value = "Timeout";
			}
			else if (ScanStatus.StoreError == (ctx.ScanStatus & ScanStatus.StoreError))
			{
				value = "StoreError";
			}
			else if (ScanStatus.ScannerError == (ctx.ScanStatus & ScanStatus.ScannerError))
			{
				value = "ScannerError";
			}
			else if (ScanStatus.BiasError == (ctx.ScanStatus & ScanStatus.BiasError))
			{
				value = "BiasError";
			}
			else if (ScanStatus.CategoryError == (ctx.ScanStatus & ScanStatus.CategoryError))
			{
				value = "CategoryError";
			}
			else if (ScanStatus.Error == (ctx.ScanStatus & ScanStatus.Error))
			{
				value = "ScanError";
			}
			else if (ScanStatus.PolicyViolation == (ctx.ScanStatus & ScanStatus.PolicyViolation))
			{
				value = "PolicyViolation";
			}
			list.Add(new KeyValuePair<string, string>("action", MalwareResultLogger.GetScanStatusAction(ctx.ScanActionExecuted, ctx.ScanStatus)));
			list.Add(new KeyValuePair<string, string>("error", value));
			list.Add(new KeyValuePair<string, string>("atch", ctx.AttachmentCount.ToString()));
			if (!string.IsNullOrEmpty(ctx.ErrorDetails))
			{
				list.Add(new KeyValuePair<string, string>("errordetails", ctx.ErrorDetails));
			}
			return list;
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x00008EAC File Offset: 0x000070AC
		public static List<MalwareResultEngineInfo> Parse(FilteringResults results)
		{
			List<MalwareResultEngineInfo> list = new List<MalwareResultEngineInfo>();
			if (results != null)
			{
				IDictionary<ScannerIdentity, IEnumerable<ResultsExtensions.StreamDetectionPair>> dictionary = ResultsExtensions.GroupDetectionsByScanner(results, 3);
				foreach (KeyValuePair<ScannerIdentity, IEnumerable<ResultsExtensions.StreamDetectionPair>> keyValuePair in dictionary)
				{
					ScannerIdentity key = keyValuePair.Key;
					string name = string.Format("{0} : {1}", key.Vendor, key.Name);
					List<ResultsExtensions.StreamDetectionPair> list2 = keyValuePair.Value.ToList<ResultsExtensions.StreamDetectionPair>();
					if (list2.Count == 0)
					{
						list.Add(new MalwareResultEngineInfo(name, key.SignatureVersions));
					}
					else
					{
						foreach (ResultsExtensions.StreamDetectionPair streamDetectionPair in list2)
						{
							list.Add(new MalwareResultEngineInfo(name, key.SignatureVersions, streamDetectionPair.Detection.Name, streamDetectionPair.Stream.Name));
						}
					}
				}
			}
			return list;
		}

		// Token: 0x060000D4 RID: 212 RVA: 0x00008FC0 File Offset: 0x000071C0
		private static string GetScanStatusAction(ScanAction action, ScanStatus status)
		{
			string result = string.Empty;
			if (action == ScanAction.Blocked)
			{
				result = "b";
			}
			else if (action == ScanAction.Replaced)
			{
				result = "r";
			}
			else if (action == ScanAction.Deferred)
			{
				result = "d";
			}
			else if (action == ScanAction.SoftDelete)
			{
				result = "s";
			}
			else if (action == ScanAction.Skipped)
			{
				if (ScanStatus.Bypassed == (status & ScanStatus.Bypassed))
				{
					result = "p";
				}
				else if (ScanStatus.BypassStamp == (status & ScanStatus.BypassStamp))
				{
					result = "st";
				}
				else if (ScanStatus.BypassSystem == (status & ScanStatus.BypassSystem))
				{
					result = "sy";
				}
			}
			else if (action == ScanAction.Rejected)
			{
				if (ScanStatus.RejectedInternalError == (status & ScanStatus.RejectedInternalError))
				{
					result = "ni";
				}
				else if (ScanStatus.RejectedExternalError == (status & ScanStatus.RejectedExternalError))
				{
					result = "ne";
				}
			}
			return result;
		}

		// Token: 0x02000027 RID: 39
		private class KeyNames
		{
			// Token: 0x040000FB RID: 251
			public const string Verdict = "v";

			// Token: 0x040000FC RID: 252
			public const string Action = "action";

			// Token: 0x040000FD RID: 253
			public const string Error = "error";

			// Token: 0x040000FE RID: 254
			public const string ErrorDetails = "errordetails";

			// Token: 0x040000FF RID: 255
			public const string AttachCount = "atch";
		}
	}
}
