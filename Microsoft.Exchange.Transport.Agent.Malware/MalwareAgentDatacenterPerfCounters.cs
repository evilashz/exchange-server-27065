using System;
using System.Xml;
using System.Xml.Linq;
using Microsoft.Exchange.Diagnostics;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x0200001F RID: 31
	internal static class MalwareAgentDatacenterPerfCounters
	{
		// Token: 0x060000B4 RID: 180 RVA: 0x00007A5C File Offset: 0x00005C5C
		public static void GetPerfCounterInfo(XElement element)
		{
			if (MalwareAgentDatacenterPerfCounters.AllCounters == null)
			{
				return;
			}
			foreach (ExPerformanceCounter exPerformanceCounter in MalwareAgentDatacenterPerfCounters.AllCounters)
			{
				try
				{
					element.Add(new XElement(ExPerformanceCounter.GetEncodedName(exPerformanceCounter.CounterName), exPerformanceCounter.NextValue()));
				}
				catch (XmlException ex)
				{
					XElement content = new XElement("Error", ex.Message);
					element.Add(content);
				}
			}
		}

		// Token: 0x04000097 RID: 151
		public const string CategoryName = "MSExchange Anti-Malware Datacenter Perfcounters";

		// Token: 0x04000098 RID: 152
		public static readonly ExPerformanceCounter ItemsInFingerPrintingCache = new ExPerformanceCounter("MSExchange Anti-Malware Datacenter Perfcounters", "Number of items in Malware Fingerprint cache", string.Empty, null, new ExPerformanceCounter[0]);

		// Token: 0x04000099 RID: 153
		private static readonly ExPerformanceCounter FingerPrintingCacheHitPerSecond = new ExPerformanceCounter("MSExchange Anti-Malware Datacenter Perfcounters", "Number of items, item is matched with finger printing cache/sec", string.Empty, null, new ExPerformanceCounter[0]);

		// Token: 0x0400009A RID: 154
		public static readonly ExPerformanceCounter FingerPrintingCacheHit = new ExPerformanceCounter("MSExchange Anti-Malware Datacenter Perfcounters", "Number of items, item is matched with finger printing cache", string.Empty, null, new ExPerformanceCounter[]
		{
			MalwareAgentDatacenterPerfCounters.FingerPrintingCacheHitPerSecond
		});

		// Token: 0x0400009B RID: 155
		private static readonly ExPerformanceCounter FingerPrintingCacheLowFidelityMissPerSecond = new ExPerformanceCounter("MSExchange Anti-Malware Datacenter Perfcounters", "Matched Low FidelityFingerPrint, but missed HighFidelity FingerPrint/sec", string.Empty, null, new ExPerformanceCounter[0]);

		// Token: 0x0400009C RID: 156
		public static readonly ExPerformanceCounter FingerPrintingCacheLowFidelityMiss = new ExPerformanceCounter("MSExchange Anti-Malware Datacenter Perfcounters", "Count Matched LowFidelity FingerPrint, but missed HighFidelity FingerPrint", string.Empty, null, new ExPerformanceCounter[]
		{
			MalwareAgentDatacenterPerfCounters.FingerPrintingCacheLowFidelityMissPerSecond
		});

		// Token: 0x0400009D RID: 157
		public static readonly ExPerformanceCounter[] AllCounters = new ExPerformanceCounter[]
		{
			MalwareAgentDatacenterPerfCounters.ItemsInFingerPrintingCache,
			MalwareAgentDatacenterPerfCounters.FingerPrintingCacheHit,
			MalwareAgentDatacenterPerfCounters.FingerPrintingCacheLowFidelityMiss
		};
	}
}
