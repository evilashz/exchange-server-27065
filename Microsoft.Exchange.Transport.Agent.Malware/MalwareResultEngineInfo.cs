using System;
using System.Collections.Generic;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x02000024 RID: 36
	internal class MalwareResultEngineInfo
	{
		// Token: 0x060000C0 RID: 192 RVA: 0x000089C8 File Offset: 0x00006BC8
		public MalwareResultEngineInfo(string name, string signatureVersion)
		{
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentNullException("The engine name must be specified.", "name");
			}
			this.Name = name;
			this.DetectionsFound = false;
			this.SignatureVersion = ((signatureVersion != null) ? signatureVersion : string.Empty);
			this.Detection = string.Empty;
			this.FileName = string.Empty;
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x00008A28 File Offset: 0x00006C28
		public MalwareResultEngineInfo(string name, string signatureVersion, string detection, string fileName)
		{
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentNullException("The engine name must be specified.", "name");
			}
			this.Name = name;
			this.DetectionsFound = true;
			this.SignatureVersion = ((signatureVersion != null) ? signatureVersion : string.Empty);
			this.Detection = ((detection != null) ? detection : string.Empty);
			this.FileName = ((fileName != null) ? fileName : string.Empty);
		}

		// Token: 0x1700001D RID: 29
		// (get) Token: 0x060000C2 RID: 194 RVA: 0x00008A96 File Offset: 0x00006C96
		// (set) Token: 0x060000C3 RID: 195 RVA: 0x00008A9E File Offset: 0x00006C9E
		public string Name { get; private set; }

		// Token: 0x1700001E RID: 30
		// (get) Token: 0x060000C4 RID: 196 RVA: 0x00008AA7 File Offset: 0x00006CA7
		// (set) Token: 0x060000C5 RID: 197 RVA: 0x00008AAF File Offset: 0x00006CAF
		public bool DetectionsFound { get; private set; }

		// Token: 0x1700001F RID: 31
		// (get) Token: 0x060000C6 RID: 198 RVA: 0x00008AB8 File Offset: 0x00006CB8
		// (set) Token: 0x060000C7 RID: 199 RVA: 0x00008AC0 File Offset: 0x00006CC0
		public string SignatureVersion { get; private set; }

		// Token: 0x17000020 RID: 32
		// (get) Token: 0x060000C8 RID: 200 RVA: 0x00008AC9 File Offset: 0x00006CC9
		// (set) Token: 0x060000C9 RID: 201 RVA: 0x00008AD1 File Offset: 0x00006CD1
		public string Detection { get; private set; }

		// Token: 0x17000021 RID: 33
		// (get) Token: 0x060000CA RID: 202 RVA: 0x00008ADA File Offset: 0x00006CDA
		// (set) Token: 0x060000CB RID: 203 RVA: 0x00008AE2 File Offset: 0x00006CE2
		public string FileName { get; private set; }

		// Token: 0x17000022 RID: 34
		// (get) Token: 0x060000CC RID: 204 RVA: 0x00008AEC File Offset: 0x00006CEC
		public int TotalLength
		{
			get
			{
				int num = 0;
				num += this.Name.Length;
				num += this.SignatureVersion.Length;
				num += this.Detection.Length;
				return num + this.FileName.Length;
			}
		}

		// Token: 0x060000CD RID: 205 RVA: 0x00008B34 File Offset: 0x00006D34
		public List<KeyValuePair<string, string>> GetDetectionInfo()
		{
			List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>();
			string text = MalwareResultEngineInfo.ConvertEngineNameToCode(this.Name);
			string text2 = this.DetectionsFound ? "1" : "0";
			int num = MalwareResultEngineInfo.KeyNames.EngineKeyLength + text.Length + text2.Length + this.SignatureVersion.Length + this.Detection.Length + this.FileName.Length;
			string text3 = this.SignatureVersion;
			string text4 = this.Detection;
			string text5 = this.FileName;
			if (num > 200)
			{
				int num2 = num - 200;
				if (num2 > 0)
				{
					text4 = MalwareResultEngineInfo.Truncate(text4, ref num2);
				}
				if (num2 > 0)
				{
					text3 = MalwareResultEngineInfo.Truncate(text3, ref num2);
				}
				if (num2 > 0)
				{
					text5 = MalwareResultEngineInfo.Truncate(text5, ref num2);
				}
				if (num2 > 0)
				{
					throw new ArgumentException("Unable to trim string to the necessary length to log.");
				}
			}
			list.Add(new KeyValuePair<string, string>("engine", text));
			list.Add(new KeyValuePair<string, string>("v", text2));
			list.Add(new KeyValuePair<string, string>("sig", text3));
			list.Add(new KeyValuePair<string, string>("name", text4));
			list.Add(new KeyValuePair<string, string>("file", text5));
			return list;
		}

		// Token: 0x060000CE RID: 206 RVA: 0x00008C62 File Offset: 0x00006E62
		private static string ConvertEngineNameToCode(string engineName)
		{
			if (engineName.StartsWith("Microsoft"))
			{
				return "M";
			}
			if (engineName.StartsWith("Kaspersky"))
			{
				return "K";
			}
			if (engineName.StartsWith("Authentium"))
			{
				return "A";
			}
			return "U";
		}

		// Token: 0x060000CF RID: 207 RVA: 0x00008CA4 File Offset: 0x00006EA4
		private static string Truncate(string source, ref int amountToTrim)
		{
			if (!string.IsNullOrEmpty(source))
			{
				int length = source.Length;
				if (length <= amountToTrim)
				{
					source = string.Empty;
					amountToTrim -= length;
				}
				else
				{
					source = source.Substring(0, length - amountToTrim);
					amountToTrim = 0;
				}
			}
			return source;
		}

		// Token: 0x040000F0 RID: 240
		private const int MaxFormattedLength = 200;

		// Token: 0x02000025 RID: 37
		private class KeyNames
		{
			// Token: 0x17000023 RID: 35
			// (get) Token: 0x060000D0 RID: 208 RVA: 0x00008CE5 File Offset: 0x00006EE5
			public static int EngineKeyLength
			{
				get
				{
					return "engine".Length + "v".Length + "sig".Length + "name".Length + "file".Length;
				}
			}

			// Token: 0x040000F6 RID: 246
			public const string Verdict = "v";

			// Token: 0x040000F7 RID: 247
			public const string Engine = "engine";

			// Token: 0x040000F8 RID: 248
			public const string Signature = "sig";

			// Token: 0x040000F9 RID: 249
			public const string Name = "name";

			// Token: 0x040000FA RID: 250
			public const string FileName = "file";
		}
	}
}
