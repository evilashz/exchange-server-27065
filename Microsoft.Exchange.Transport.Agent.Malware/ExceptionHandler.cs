using System;
using System.Collections.Generic;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.Transport.Agent.Malware.Actions;
using Microsoft.Exchange.Transport.Agent.Malware.SoftDelete;
using Microsoft.Filtering;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x02000016 RID: 22
	internal class ExceptionHandler
	{
		// Token: 0x0600005B RID: 91 RVA: 0x0000466E File Offset: 0x0000286E
		public ExceptionHandler(RecoveryDelegate recoveryDelegate) : this(recoveryDelegate, null)
		{
		}

		// Token: 0x0600005C RID: 92 RVA: 0x00004678 File Offset: 0x00002878
		public ExceptionHandler(RecoveryDelegate recoveryDelegate, Microsoft.Exchange.Transport.Agent.Malware.Actions.Action defaultAction)
		{
			this.registeredActions.Add(typeof(QueueFullException), new ActionDeferForever());
			this.registeredActions.Add(typeof(ConfigurationException), new ActionDeferForever());
			this.registeredActions.Add(typeof(BiasException), new ActionDeferForever());
			this.registeredActions.Add(typeof(ServiceUnavailableException), new ActionRecover(recoveryDelegate));
			this.registeredActions.Add(typeof(FilteringException), new ActionRecover(recoveryDelegate));
			this.registeredActions.Add(typeof(ScanTimeoutException), new ActionDefer(typeof(ActionReject)));
			this.registeredActions.Add(typeof(ScanQueueTimeoutException), new ActionDeferForever());
			this.registeredActions.Add(typeof(ScannerCrashException), new ActionDefer(typeof(ActionSoftDelete)));
			this.registeredActions.Add(typeof(UnauthorizedAccessException), new ActionDeferForever());
			this.registeredActions.Add(typeof(StorageException), new ActionDeferForever());
			this.registeredActions.Add(typeof(MalwareAgentTransientException), new ActionDeferForever());
			this.registeredActions.Add(typeof(ScanAbortedException), new ActionDeferForever());
			this.defaultAction = defaultAction;
		}

		// Token: 0x1700000D RID: 13
		// (get) Token: 0x0600005D RID: 93 RVA: 0x000047EB File Offset: 0x000029EB
		public Dictionary<Type, Microsoft.Exchange.Transport.Agent.Malware.Actions.Action> RegisteredActions
		{
			get
			{
				return this.registeredActions;
			}
		}

		// Token: 0x1700000E RID: 14
		// (get) Token: 0x0600005E RID: 94 RVA: 0x000047F3 File Offset: 0x000029F3
		public Microsoft.Exchange.Transport.Agent.Malware.Actions.Action DefaultAction
		{
			get
			{
				return this.defaultAction;
			}
		}

		// Token: 0x0600005F RID: 95 RVA: 0x000047FB File Offset: 0x000029FB
		public bool Handle(Exception e, ScanContext context, SubmittedMessageEventSource source, QueuedMessageEventArgs args, Action<Exception> beforeHandledException = null)
		{
			return this.RegisteredActions.ContainsKey(e.GetType()) && this.Handle(this.RegisteredActions[e.GetType()], e, context, source, args, beforeHandledException);
		}

		// Token: 0x06000060 RID: 96 RVA: 0x00004830 File Offset: 0x00002A30
		public bool Handle(Microsoft.Exchange.Transport.Agent.Malware.Actions.Action action, Exception e, ScanContext context, SubmittedMessageEventSource source, QueuedMessageEventArgs args, Action<Exception> beforeHandledException = null)
		{
			if (beforeHandledException != null)
			{
				beforeHandledException(e);
			}
			if (ScanAction.Blocked == context.ScanActionExecuted || ScanAction.Deferred == context.ScanActionExecuted || ScanAction.SoftDelete == context.ScanActionExecuted || ScanAction.Rejected == context.ScanActionExecuted)
			{
				ExTraceGlobals.ActionsTracer.TraceDebug<string, string>((long)this.GetHashCode(), "The message has already been {0}, the exception {2} could not be sent to an action for further processing.", context.ScanActionExecuted.ToString(), e.ToString());
			}
			else
			{
				action.Execute(context, source, args);
			}
			return true;
		}

		// Token: 0x0400004D RID: 77
		private Dictionary<Type, Microsoft.Exchange.Transport.Agent.Malware.Actions.Action> registeredActions = new Dictionary<Type, Microsoft.Exchange.Transport.Agent.Malware.Actions.Action>();

		// Token: 0x0400004E RID: 78
		private Microsoft.Exchange.Transport.Agent.Malware.Actions.Action defaultAction;
	}
}
