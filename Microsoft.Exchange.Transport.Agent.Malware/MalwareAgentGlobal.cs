using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading;
using Microsoft.Exchange.Data.Directory;
using Microsoft.Exchange.Data.Directory.Management;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Data.Mime;
using Microsoft.Exchange.Data.Transport;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Diagnostics;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.MessagingPolicies.HygieneRules;
using Microsoft.Exchange.MessagingPolicies.Rules;
using Microsoft.Exchange.Net;
using Microsoft.Exchange.Threading;
using Microsoft.Exchange.Transport.Agent.Malware.Common;
using Microsoft.Exchange.Transport.Agent.Malware.SoftDelete;
using Microsoft.Filtering;
using Microsoft.Filtering.Configuration;
using Microsoft.Office.Datacenter.ActiveMonitoring;
using Microsoft.Win32;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	// Token: 0x0200001C RID: 28
	internal class MalwareAgentGlobal : IDisposable
	{
		// Token: 0x06000082 RID: 130 RVA: 0x00006604 File Offset: 0x00004804
		public MalwareAgentGlobal()
		{
			Interlocked.Exchange(ref this.filteringServiceRecovery, 0);
			MalwareAgentGlobal.EventLogger.SetEventPeriod(3600);
			this.defaultExceptionHandler = new ExceptionHandler(() => this.ResetFilteringService());
			this.perfCounterWrapper = new MalwareAgentPerfCountersWrapper();
			this.serverSettingsUpdateFrequency = this.GetServerSettingsUpdateFrequency();
			Server localServer = null;
			ADNotificationAdapter.RunADOperation(delegate()
			{
				this.adSession = DirectorySessionFactory.Default.CreateTopologyConfigurationSession(ConsistencyMode.IgnoreInvalid, ADSessionSettings.FromRootOrgScopeSet(), 185, ".ctor", "f:\\15.00.1497\\sources\\dev\\Hygiene\\src\\AntiMalware\\Malware\\MalwareAgentGlobal.cs");
				localServer = this.adSession.ReadLocalServer();
				this.transportConfigContainer = this.adSession.FindSingletonConfigurationObject<TransportConfigContainer>();
			}, 5);
			this.serverSettings = new MalwareFilteringServer(localServer);
			this.InitializeADPollTimer();
			this.malwareFilterRulesCache = new TenantConfigurationCache<MalwareRulesPerTenantSettings>(31457280L, Components.TransportAppConfig.PerTenantCache.TransportRulesCacheExpiryInterval, Components.TransportAppConfig.PerTenantCache.TransportRulesCacheCleanupInterval, null, null);
			this.malwareFilterPolicyCache = new TenantConfigurationCache<TenantMalwareFilterPolicies>(31457280L, TimeSpan.FromMinutes(15.0), TimeSpan.FromMinutes(135.0), null, null);
			this.defaultConfig = new MalwareFilterPolicy();
			this.service = new FilteringService();
			this.overrideWaitTime = this.GetOverrideWaitTime();
			this.isSoftDeleteEnabled = this.IsSoftDeleteEnabled();
			if (this.isSoftDeleteEnabled)
			{
				this.LoadSoftDeleteQueue();
				CalcAsyncDriver calcAsyncDriver = new CalcAsyncDriver(this.DirectoryStorage);
				calcAsyncDriver.BeginStorageSizeCalculation();
				this.LoadDirectoryWatcher();
			}
			this.fingerPrintManager = new MalwareFingerPrintManager();
			this.ConsumerScannerSettings = this.GetConsumerScannerSettings();
		}

		// Token: 0x06000083 RID: 131 RVA: 0x0000677C File Offset: 0x0000497C
		public MalwareAgentGlobal(IFilteringService filteringService, ExceptionHandler defaultHandler, MalwareFilteringServer serverSettings, MalwareFilterPolicy defaultConfig, bool softDeleteEnabled)
		{
			Interlocked.Exchange(ref this.filteringServiceRecovery, 0);
			this.service = filteringService;
			this.defaultExceptionHandler = defaultHandler;
			this.serverSettings = serverSettings;
			this.defaultConfig = defaultConfig;
			if (softDeleteEnabled)
			{
				this.LoadSoftDeleteQueue();
				CalcAsyncDriver calcAsyncDriver = new CalcAsyncDriver(this.DirectoryStorage);
				calcAsyncDriver.BeginStorageSizeCalculation();
				this.LoadDirectoryWatcher();
			}
		}

		// Token: 0x1700000F RID: 15
		// (get) Token: 0x06000084 RID: 132 RVA: 0x000067E7 File Offset: 0x000049E7
		public static ExEventLog EventLogger
		{
			get
			{
				return MalwareAgentGlobal.eventLogger;
			}
		}

		// Token: 0x17000010 RID: 16
		// (get) Token: 0x06000085 RID: 133 RVA: 0x000067EE File Offset: 0x000049EE
		public IFilteringService FilteringService
		{
			get
			{
				return this.service;
			}
		}

		// Token: 0x17000011 RID: 17
		// (get) Token: 0x06000086 RID: 134 RVA: 0x000067F6 File Offset: 0x000049F6
		public MalwareFingerPrintManager FingerPrintManager
		{
			get
			{
				return this.fingerPrintManager;
			}
		}

		// Token: 0x17000012 RID: 18
		// (get) Token: 0x06000087 RID: 135 RVA: 0x000067FE File Offset: 0x000049FE
		public ExceptionHandler DefaultExceptionHandler
		{
			get
			{
				return this.defaultExceptionHandler;
			}
		}

		// Token: 0x17000013 RID: 19
		// (get) Token: 0x06000088 RID: 136 RVA: 0x00006806 File Offset: 0x00004A06
		public MalwareAgentPerfCountersWrapper PerfCounterWrapper
		{
			get
			{
				return this.perfCounterWrapper;
			}
		}

		// Token: 0x17000014 RID: 20
		// (get) Token: 0x06000089 RID: 137 RVA: 0x0000680E File Offset: 0x00004A0E
		public MalwareFilteringServer ServerSettings
		{
			get
			{
				return this.serverSettings;
			}
		}

		// Token: 0x17000015 RID: 21
		// (get) Token: 0x0600008A RID: 138 RVA: 0x00006816 File Offset: 0x00004A16
		public TransportConfigContainer TransportConfiguration
		{
			get
			{
				return this.transportConfigContainer;
			}
		}

		// Token: 0x17000016 RID: 22
		// (get) Token: 0x0600008B RID: 139 RVA: 0x0000681E File Offset: 0x00004A1E
		// (set) Token: 0x0600008C RID: 140 RVA: 0x00006826 File Offset: 0x00004A26
		public SoftDeleteQueue SoftDeleteQueue
		{
			get
			{
				return this.softDeleteQueue;
			}
			internal set
			{
				this.softDeleteQueue = value;
			}
		}

		// Token: 0x17000017 RID: 23
		// (get) Token: 0x0600008D RID: 141 RVA: 0x0000682F File Offset: 0x00004A2F
		public DirectoryStorage DirectoryStorage
		{
			get
			{
				return this.directoryStorage;
			}
		}

		// Token: 0x17000018 RID: 24
		// (get) Token: 0x0600008E RID: 142 RVA: 0x00006837 File Offset: 0x00004A37
		// (set) Token: 0x0600008F RID: 143 RVA: 0x0000683F File Offset: 0x00004A3F
		public bool SoftDeleteEnabled
		{
			get
			{
				return this.isSoftDeleteEnabled;
			}
			internal set
			{
				this.isSoftDeleteEnabled = value;
			}
		}

		// Token: 0x17000019 RID: 25
		// (get) Token: 0x06000090 RID: 144 RVA: 0x00006848 File Offset: 0x00004A48
		// (set) Token: 0x06000091 RID: 145 RVA: 0x00006850 File Offset: 0x00004A50
		public long MaxThresholdSizeBytes
		{
			get
			{
				return this.maxThresholdSizeBytes;
			}
			set
			{
				this.maxThresholdSizeBytes = value;
			}
		}

		// Token: 0x1700001A RID: 26
		// (get) Token: 0x06000092 RID: 146 RVA: 0x00006859 File Offset: 0x00004A59
		public TimeSpan OverrideWaitTime
		{
			get
			{
				return this.overrideWaitTime;
			}
		}

		// Token: 0x1700001B RID: 27
		// (get) Token: 0x06000093 RID: 147 RVA: 0x00006861 File Offset: 0x00004A61
		// (set) Token: 0x06000094 RID: 148 RVA: 0x00006869 File Offset: 0x00004A69
		public Guid ServiceRecoveryPeriodicKey { get; set; }

		// Token: 0x1700001C RID: 28
		// (get) Token: 0x06000095 RID: 149 RVA: 0x00006872 File Offset: 0x00004A72
		// (set) Token: 0x06000096 RID: 150 RVA: 0x0000687A File Offset: 0x00004A7A
		public IList<ScannerSettings> ConsumerScannerSettings { get; private set; }

		// Token: 0x06000097 RID: 151 RVA: 0x00006884 File Offset: 0x00004A84
		public static TransportMailItem GetTransportMailItem(MailItem mailItem)
		{
			TransportMailItemWrapper transportMailItemWrapper = mailItem as TransportMailItemWrapper;
			TransportMailItem result = null;
			if (transportMailItemWrapper != null)
			{
				result = transportMailItemWrapper.TransportMailItem;
			}
			return result;
		}

		// Token: 0x06000098 RID: 152 RVA: 0x0000695C File Offset: 0x00004B5C
		public MalwareFilterPolicy GetMalwareConfig(SubmittedMessageEventSource source, QueuedMessageEventArgs args, SmtpServer smtpServer)
		{
			MalwareFilterPolicy malwarePolicy = null;
			OrganizationId organizationId;
			if (this.TryGetOrganizationId(args.MailItem, out organizationId))
			{
				bool flag = this.RunRulesToStampPolicyHeader(source, args, smtpServer, organizationId);
				if (flag)
				{
					string malwarePolicyName = MalwareAgentGlobal.GetMalwarePolicyNameFromHeader(args);
					if (malwarePolicyName != null && !this.TryGetMalwareFilterPolicyFromCache(organizationId, malwarePolicyName, out malwarePolicy))
					{
						ADOperationResult adoperationResult = ADNotificationAdapter.TryRunADOperation(delegate()
						{
							ITenantConfigurationSession tenantConfigurationSession = DirectorySessionFactory.Default.CreateTenantConfigurationSession(ConsistencyMode.IgnoreInvalid, ADSessionSettings.FromOrganizationIdWithoutRbacScopesServiceOnly(organizationId), 434, "GetMalwareConfig", "f:\\15.00.1497\\sources\\dev\\Hygiene\\src\\AntiMalware\\Malware\\MalwareAgentGlobal.cs");
							if (tenantConfigurationSession.SessionSettings != null && SharedConfiguration.IsDehydratedConfiguration(tenantConfigurationSession.SessionSettings.CurrentOrganizationId))
							{
								tenantConfigurationSession = (ITenantConfigurationSession)SharedConfiguration.CreateScopedToSharedConfigADSession(tenantConfigurationSession.SessionSettings.CurrentOrganizationId);
							}
							malwarePolicy = this.FindMalwareConfig(tenantConfigurationSession, (MalwareFilterPolicy config) => config.Name.Equals(malwarePolicyName, StringComparison.InvariantCultureIgnoreCase));
						});
						if (!adoperationResult.Succeeded)
						{
							ExTraceGlobals.AgentTracer.TraceError<OrganizationId, Exception>((long)this.GetHashCode(), "Failed to load tenant malware filter configuration. Reverting to the default configuration. Organization ID: {0}. Error: {1}", organizationId, adoperationResult.Exception);
						}
					}
				}
				if (malwarePolicy == null && !this.TryGetMalwareFilterPolicyFromCache(organizationId, null, out malwarePolicy))
				{
					ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Default malware filter policy could not be obtained from the cache. Global Default policy will be applied.");
				}
			}
			return malwarePolicy ?? this.defaultConfig;
		}

		// Token: 0x06000099 RID: 153 RVA: 0x00006A78 File Offset: 0x00004C78
		public CultureInfo DetermineCultureBasedOnMessage(TransportConfigContainer configContainer, MailItem mailItem, bool external)
		{
			HeaderList headers = mailItem.Message.RootPart.Headers;
			Header acceptLanguageHeader = headers.FindFirst("Accept-Language");
			Header contentLanguageHeader = headers.FindFirst("Content-Language");
			return MessageLanguageParser.GetCulture(acceptLanguageHeader, contentLanguageHeader, external ? configContainer.ExternalDsnLanguageDetectionEnabled : configContainer.InternalDsnLanguageDetectionEnabled, external ? configContainer.ExternalDsnDefaultLanguage : configContainer.InternalDsnDefaultLanguage);
		}

		// Token: 0x0600009A RID: 154 RVA: 0x00006AD8 File Offset: 0x00004CD8
		public bool ResetFilteringService()
		{
			if (Interlocked.CompareExchange(ref this.filteringServiceRecovery, 1, 0) == 0)
			{
				this.ServiceRecoveryPeriodicKey = Guid.NewGuid();
				this.service.Dispose();
				this.service = null;
				WaitCallback callBack = new WaitCallback(this.RecoverFilteringService);
				ThreadPool.QueueUserWorkItem(callBack);
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Malware scanner recovery requested.");
				return true;
			}
			return false;
		}

		// Token: 0x0600009B RID: 155 RVA: 0x00006B3E File Offset: 0x00004D3E
		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		// Token: 0x0600009C RID: 156 RVA: 0x00006B50 File Offset: 0x00004D50
		internal static string GetMalwarePolicyNameFromHeader(QueuedMessageEventArgs args)
		{
			Header header = args.MailItem.Message.RootPart.Headers.FindFirst("X-MS-Exchange-Organization-MalwareFilterPolicy");
			if (header != null)
			{
				return header.Value;
			}
			return null;
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00006B88 File Offset: 0x00004D88
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && !this.disposed)
			{
				if (this.perfCounterWrapper != null)
				{
					this.perfCounterWrapper.Dispose();
					this.perfCounterWrapper = null;
				}
				if (this.serverSettingsPollingTimer != null)
				{
					this.serverSettingsPollingTimer.Change(-1, -1);
					this.serverSettingsPollingTimer.Dispose(false);
				}
				if (this.fingerPrintManager != null)
				{
					this.fingerPrintManager.Dispose();
					this.fingerPrintManager = null;
				}
				this.disposed = true;
			}
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00006C00 File Offset: 0x00004E00
		private MalwareFilterPolicy FindMalwareConfig(IConfigurationSession adSession, Func<MalwareFilterPolicy, bool> findPolicyPredicate)
		{
			MalwareFilterPolicy[] array = adSession.Find<MalwareFilterPolicy>(null, QueryScope.SubTree, null, null, 0);
			if (array != null)
			{
				foreach (MalwareFilterPolicy malwareFilterPolicy in array)
				{
					if (findPolicyPredicate(malwareFilterPolicy))
					{
						return malwareFilterPolicy;
					}
				}
			}
			return null;
		}

		// Token: 0x0600009F RID: 159 RVA: 0x00006C48 File Offset: 0x00004E48
		private IList<ScannerSettings> GetConsumerScannerSettings()
		{
			ConsumerSettings consumerSettings = new ConsumerSettings();
			List<ScannerSettings> list = new List<ScannerSettings>();
			foreach (string name in consumerSettings.DisabledEngines)
			{
				ScannerSettings item = new ScannerSettings
				{
					Name = name,
					Enabled = false
				};
				list.Add(item);
			}
			return list;
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x00006CC4 File Offset: 0x00004EC4
		private bool TryGetMalwareFilterPolicyFromCache(OrganizationId organizationId, string malwarePolicyName, out MalwareFilterPolicy malwarePolicy)
		{
			TenantMalwareFilterPolicies tenantMalwareFilterPolicies = null;
			malwarePolicy = null;
			ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Try to read Malware Filter Policy for tenant with Organization ID: {0}", organizationId.ToString());
			if (!this.malwareFilterPolicyCache.TryGetValue(organizationId, out tenantMalwareFilterPolicies))
			{
				return false;
			}
			if (tenantMalwareFilterPolicies == null)
			{
				throw new InvalidOperationException("malwareFilterPolicyCache.TryGetValue() returned true and null policy collection. Null is not expected by the code base in this case.");
			}
			if (tenantMalwareFilterPolicies.Count == 0)
			{
				return false;
			}
			if (malwarePolicyName != null)
			{
				return tenantMalwareFilterPolicies.GetMalwareFilterPolicyByName(malwarePolicyName, out malwarePolicy);
			}
			return tenantMalwareFilterPolicies.GetDefaultMalwareFilterPolicy(out malwarePolicy);
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x00006D30 File Offset: 0x00004F30
		private void RecoverFilteringService(object state)
		{
			try
			{
				bool flag = false;
				do
				{
					ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Begin malware scanner recovery attempt.");
					try
					{
						IFilteringService filteringService = new FilteringService();
						if (filteringService != null)
						{
							Interlocked.CompareExchange<IFilteringService>(ref this.service, filteringService, null);
							MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_FilteringServiceAvailable, null, null);
							ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Completed malware scanner recovery.");
							flag = false;
						}
					}
					catch (Exception ex)
					{
						if (!flag)
						{
							MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_FilteringServiceNotAvailable, this.ServiceRecoveryPeriodicKey.ToString(), null);
							flag = true;
						}
						ExTraceGlobals.ActionsTracer.TraceDebug<string>((long)this.GetHashCode(), "Malware scanner recovery attempt failed. Error: {0}", ex.Message);
						Thread.Sleep(TimeSpan.FromSeconds(5.0));
					}
				}
				while (this.service == null);
			}
			finally
			{
				Interlocked.CompareExchange(ref this.filteringServiceRecovery, 0, 1);
			}
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00006E2C File Offset: 0x0000502C
		private void LoadSoftDeleteQueue()
		{
			string text = string.Empty;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup"))
				{
					if (registryKey == null)
					{
						this.isSoftDeleteEnabled = false;
						ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Path not set to write to undeliverable folder.");
					}
					else
					{
						text = (registryKey.GetValue("MsiInstallPath") as string);
						text += "TransportRoles\\data\\Filtering\\Undeliverable\\";
						if (!Directory.Exists(text))
						{
							Directory.CreateDirectory(text);
							ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "The missing undeliverable directory was created successfully. {0}.", text);
						}
					}
				}
			}
			catch (Exception ex)
			{
				this.isSoftDeleteEnabled = false;
				ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Could not read registry error. SoftDeleteQueue is not enabled. {0}", ex.Message);
				return;
			}
			try
			{
				this.MaxThresholdSizeBytes = 2147483647L;
				using (RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent\\MalwareTestHooks"))
				{
					if (registryKey2 != null)
					{
						string s = registryKey2.GetValue("MaxThresholdOverride") as string;
						this.MaxThresholdSizeBytes = long.Parse(s);
					}
				}
			}
			catch
			{
				this.MaxThresholdSizeBytes = 2147483647L;
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Could not read registry error. MaxThresholdOverride is not enabled.");
			}
			this.directoryStorage = new DirectoryStorage(text, this.MaxThresholdSizeBytes, this.PerfCounterWrapper);
			this.softDeleteQueue = new SoftDeleteQueue(this.directoryStorage);
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00006FBC File Offset: 0x000051BC
		private void LoadDirectoryWatcher()
		{
			CalculationAsync calculationAsysnc = new CalculationAsync(this.softDeleteQueue);
			this.directoryChangeNotification = new DirectoryChangeNotification(calculationAsysnc);
			this.directoryChangeNotification.Run();
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00006FEC File Offset: 0x000051EC
		private bool IsSoftDeleteEnabled()
		{
			bool result;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent"))
				{
					if (registryKey == null)
					{
						this.isSoftDeleteEnabled = false;
						result = this.isSoftDeleteEnabled;
					}
					else
					{
						string a = registryKey.GetValue("IsSoftDeleteEnable") as string;
						if (string.Equals(a, "true"))
						{
							this.isSoftDeleteEnabled = true;
						}
						else
						{
							this.isSoftDeleteEnabled = false;
						}
						result = this.isSoftDeleteEnabled;
					}
				}
			}
			catch (Exception)
			{
				this.isSoftDeleteEnabled = false;
				result = this.isSoftDeleteEnabled;
			}
			return result;
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x0000708C File Offset: 0x0000528C
		private void PollServerSettings(object state)
		{
			this.InitializeServerSettingsFromAD();
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x00007094 File Offset: 0x00005294
		private void InitializeADPollTimer()
		{
			uint num = this.serverSettingsUpdateFrequency * 1000U;
			this.serverSettingsPollingTimer = new GuardedTimer(new TimerCallback(this.PollServerSettings), null, (long)((ulong)num), (long)((ulong)num));
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x000070EC File Offset: 0x000052EC
		private void InitializeServerSettingsFromAD()
		{
			Server localServer = null;
			ADOperationResult adoperationResult = ADNotificationAdapter.TryRunADOperation(delegate()
			{
				localServer = this.adSession.ReadLocalServer();
			}, 5);
			if (!adoperationResult.Succeeded || localServer == null)
			{
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Malware Agent had errors reading from AD.");
				return;
			}
			MalwareFilteringServer malwareFilteringServer = new MalwareFilteringServer(localServer);
			if (malwareFilteringServer == null)
			{
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Malware Filtering Server settings were not found in AD.");
				return;
			}
			Interlocked.Exchange<MalwareFilteringServer>(ref this.serverSettings, malwareFilteringServer);
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x0000717C File Offset: 0x0000537C
		private uint GetServerSettingsUpdateFrequency()
		{
			uint result = 600U;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent\\MalwareTestHooks"))
				{
					if (registryKey != null)
					{
						try
						{
							result = uint.Parse(registryKey.GetValue("ServerSettingsPollingFrequency", 600U) as string);
						}
						catch (Exception ex)
						{
							ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Could not read registry error. AD polling frequency will be set to the default value. Exception: {0}", ex.Message);
						}
					}
				}
			}
			catch (Exception)
			{
			}
			return result;
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x00007220 File Offset: 0x00005420
		private TimeSpan GetOverrideWaitTime()
		{
			TimeSpan result = Constants.DefaultOverrideWaitTime;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent\\MalwareTestHooks"))
				{
					if (registryKey != null)
					{
						try
						{
							result = TimeSpan.Parse(registryKey.GetValue("OverrideWaitTime", Constants.DefaultOverrideWaitTime) as string);
						}
						catch (Exception ex)
						{
							ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Could not read registry error. Override wait time will be set to default value of 1 hour. Exception: {0}", ex.Message);
						}
					}
				}
			}
			catch (Exception)
			{
			}
			return result;
		}

		// Token: 0x060000AA RID: 170 RVA: 0x000072C4 File Offset: 0x000054C4
		private bool TryGetOrganizationId(MailItem mailItem, out OrganizationId organizationId)
		{
			organizationId = null;
			if (MultiTenantTransport.MultiTenancyEnabled)
			{
				TransportMailItem transportMailItem = MalwareAgentGlobal.GetTransportMailItem(mailItem);
				if (transportMailItem != null)
				{
					organizationId = transportMailItem.OrganizationId;
				}
			}
			else
			{
				organizationId = OrganizationId.ForestWideOrgId;
			}
			return organizationId != null;
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00007300 File Offset: 0x00005500
		private bool RunRulesToStampPolicyHeader(SubmittedMessageEventSource source, QueuedMessageEventArgs args, SmtpServer server, OrganizationId organizationId)
		{
			RuleCollection amruleCollection = this.GetAMRuleCollection(args, organizationId);
			if (amruleCollection == null || amruleCollection.Count <= 0)
			{
				return false;
			}
			Exception ex = null;
			HygieneRuleUtils.TryRunRuleCollection(amruleCollection, server, args.MailItem, source, out ex);
			if (ex != null)
			{
				string text = string.Format("Error running MalwareFilterRules for policy discovery. Error: '{0}'", ex);
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), text);
				MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_PolicyDiscoveryFailed, organizationId.ToString(), new object[]
				{
					organizationId,
					text
				});
				EventNotificationItem.Publish(ExchangeComponent.AMADError.Name, "AntimalwareAgent.MalwareFilterPolicyDiscovery", null, string.Format("Malware Filter Policy dicovery for the tenant {0} failed. Message : {1}", organizationId, text), ResultSeverityLevel.Error, false);
				return false;
			}
			return true;
		}

		// Token: 0x060000AC RID: 172 RVA: 0x000073B0 File Offset: 0x000055B0
		private RuleCollection GetAMRuleCollection(QueuedMessageEventArgs args, OrganizationId orgId)
		{
			RuleCollection result = null;
			if (null != orgId)
			{
				MalwareRulesPerTenantSettings malwareRulesPerTenantSettings;
				if (!this.malwareFilterRulesCache.TryGetValue(orgId, out malwareRulesPerTenantSettings) || malwareRulesPerTenantSettings == null)
				{
					string text = string.Format("Error parsing MalwareFilterRules for policy discovery. Tenant: '{0}'", orgId);
					MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_PolicyDiscoveryFailed, orgId.ToString(), new object[]
					{
						orgId,
						text
					});
					EventNotificationItem.Publish(ExchangeComponent.AMADError.Name, "AntimalwareAgent.MalwareFilterPolicyDiscovery", null, string.Format("Malware Filter Policy dicovery for the tenant {0} failed. Message : {1}", orgId, text), ResultSeverityLevel.Error, false);
					ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), text);
					return null;
				}
				result = malwareRulesPerTenantSettings.RuleCollection;
			}
			return result;
		}

		// Token: 0x0400005D RID: 93
		private const uint ServerSettingsPollingFrequency = 600U;

		// Token: 0x0400005E RID: 94
		private static ExEventLog eventLogger = new ExEventLog(ExTraceGlobals.AgentTracer.Category, "MSExchange Antimalware");

		// Token: 0x0400005F RID: 95
		private readonly uint serverSettingsUpdateFrequency;

		// Token: 0x04000060 RID: 96
		private readonly TimeSpan overrideWaitTime;

		// Token: 0x04000061 RID: 97
		private IFilteringService service;

		// Token: 0x04000062 RID: 98
		private ExceptionHandler defaultExceptionHandler;

		// Token: 0x04000063 RID: 99
		private MalwareAgentPerfCountersWrapper perfCounterWrapper;

		// Token: 0x04000064 RID: 100
		private MalwareFilteringServer serverSettings;

		// Token: 0x04000065 RID: 101
		private MalwareFilterPolicy defaultConfig;

		// Token: 0x04000066 RID: 102
		private MalwareFingerPrintManager fingerPrintManager;

		// Token: 0x04000067 RID: 103
		private TransportConfigContainer transportConfigContainer;

		// Token: 0x04000068 RID: 104
		private SoftDeleteQueue softDeleteQueue;

		// Token: 0x04000069 RID: 105
		private DirectoryStorage directoryStorage;

		// Token: 0x0400006A RID: 106
		private DirectoryChangeNotification directoryChangeNotification;

		// Token: 0x0400006B RID: 107
		private bool isSoftDeleteEnabled;

		// Token: 0x0400006C RID: 108
		private int filteringServiceRecovery;

		// Token: 0x0400006D RID: 109
		private ITopologyConfigurationSession adSession;

		// Token: 0x0400006E RID: 110
		private GuardedTimer serverSettingsPollingTimer;

		// Token: 0x0400006F RID: 111
		private long maxThresholdSizeBytes = 2147483647L;

		// Token: 0x04000070 RID: 112
		private TenantConfigurationCache<MalwareRulesPerTenantSettings> malwareFilterRulesCache;

		// Token: 0x04000071 RID: 113
		private TenantConfigurationCache<TenantMalwareFilterPolicies> malwareFilterPolicyCache;

		// Token: 0x04000072 RID: 114
		private bool disposed;
	}
}
