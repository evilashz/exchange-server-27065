using System;
using System.IO;

namespace Microsoft.Exchange.Transport.Agent.Malware.SoftDelete
{
	// Token: 0x02000015 RID: 21
	internal class DirectoryStorage : IStorage
	{
		// Token: 0x0600004F RID: 79 RVA: 0x00004294 File Offset: 0x00002494
		public DirectoryStorage(string path, long maxThreshold, MalwareAgentPerfCountersWrapper perfCounterWrapper)
		{
			if (string.IsNullOrEmpty(path))
			{
				throw new ArgumentException("Path cannot be null or empty.");
			}
			if (!Directory.Exists(path))
			{
				throw new ArgumentException("Directory path does not exists.");
			}
			if (perfCounterWrapper == null)
			{
				throw new ArgumentException("PerfCounterWrapper cannot be null");
			}
			this.undelieverableFolderPath = path;
			this.maxThreshold = maxThreshold;
			this.CurrentDirectorySize = 0L;
			this.perfCounterWrapper = perfCounterWrapper;
		}

		// Token: 0x17000009 RID: 9
		// (get) Token: 0x06000050 RID: 80 RVA: 0x000042F8 File Offset: 0x000024F8
		public MalwareAgentPerfCountersWrapper PerfCounterWrapper
		{
			get
			{
				return this.perfCounterWrapper;
			}
		}

		// Token: 0x1700000A RID: 10
		// (get) Token: 0x06000051 RID: 81 RVA: 0x00004300 File Offset: 0x00002500
		public string UndelieverableFolderPath
		{
			get
			{
				return this.undelieverableFolderPath;
			}
		}

		// Token: 0x1700000B RID: 11
		// (get) Token: 0x06000052 RID: 82 RVA: 0x00004308 File Offset: 0x00002508
		public long MaxThreshold
		{
			get
			{
				return this.maxThreshold;
			}
		}

		// Token: 0x1700000C RID: 12
		// (get) Token: 0x06000053 RID: 83 RVA: 0x00004310 File Offset: 0x00002510
		// (set) Token: 0x06000054 RID: 84 RVA: 0x00004318 File Offset: 0x00002518
		public long CurrentDirectorySize { get; set; }

		// Token: 0x06000055 RID: 85 RVA: 0x00004324 File Offset: 0x00002524
		public void AddToStorage(Stream message, string messageId)
		{
			if (string.IsNullOrEmpty(messageId))
			{
				throw new ArgumentException("Data cannot be added to the store using filename with a null/empty value.");
			}
			if (message == null)
			{
				throw new ArgumentNullException("Data cannot be added to the store using a null value for message.");
			}
			if (!this.TestForSufficientResources(message))
			{
				throw new StorageException("Storage did not have sufficient resources to store data.");
			}
			string text = messageId.Trim(new char[]
			{
				'<',
				'>'
			});
			text = DirectoryStorage.FileNameParser(text);
			string fullFileName = this.UndelieverableFolderPath + text;
			try
			{
				this.SaveStreamToFile(fullFileName, message);
			}
			catch (Exception innerException)
			{
				throw new StorageException("Data failed to save to stream", innerException);
			}
		}

		// Token: 0x06000056 RID: 86 RVA: 0x000043BC File Offset: 0x000025BC
		public string GetStorageDestination()
		{
			return this.UndelieverableFolderPath;
		}

		// Token: 0x06000057 RID: 87 RVA: 0x000043C4 File Offset: 0x000025C4
		private static string FileNameParser(string fileName)
		{
			string text = fileName;
			foreach (char oldChar in DirectoryStorage.invalid)
			{
				text = text.Replace(oldChar, '_');
			}
			return text;
		}

		// Token: 0x06000058 RID: 88 RVA: 0x00004400 File Offset: 0x00002600
		private bool TestForSufficientResources(Stream message)
		{
			if (message == null)
			{
				throw new ArgumentNullException("Cannot test for sufficient resources using a null value.");
			}
			if (!Directory.Exists(this.UndelieverableFolderPath))
			{
				throw new ArgumentException("Cannot test for sufficient resources if directory does not exists.");
			}
			long length = message.Length;
			long num = this.MaxThreshold - this.CurrentDirectorySize;
			return length <= num;
		}

		// Token: 0x06000059 RID: 89 RVA: 0x00004450 File Offset: 0x00002650
		private void SaveStreamToFile(string fullFileName, Stream stream)
		{
			if (string.IsNullOrEmpty(fullFileName))
			{
				throw new ArgumentException("Cannot save to store using a null/empty value.");
			}
			if (stream == null)
			{
				throw new ArgumentNullException("cannot save to store using a null value.");
			}
			byte[] array = Obfuscate.Encode(stream);
			lock (DirectoryStorage.sync)
			{
				if (File.Exists(fullFileName + ".frf"))
				{
					DirectoryStorage.counter = (DirectoryStorage.counter + 1 & 511);
					fullFileName += string.Format("{0}{1:00}{2:00}{3:00}{4:00}{5:00}{6:000}", new object[]
					{
						DateTime.UtcNow.Year,
						DateTime.UtcNow.Day,
						DateTime.UtcNow.Month,
						DateTime.UtcNow.Hour,
						DateTime.UtcNow.Minute,
						DateTime.UtcNow.Second,
						DirectoryStorage.counter
					});
				}
				fullFileName += ".frf";
				using (Stream stream2 = File.Open(fullFileName, FileMode.CreateNew))
				{
					try
					{
						stream2.Write(array, 0, array.Length);
					}
					catch (Exception)
					{
						throw new StorageException("Message could not be written to disk");
					}
				}
			}
			try
			{
				this.CurrentDirectorySize += stream.Length;
			}
			catch (OverflowException)
			{
				this.CurrentDirectorySize = long.MaxValue;
			}
		}

		// Token: 0x04000046 RID: 70
		private static string invalid = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());

		// Token: 0x04000047 RID: 71
		private static int counter;

		// Token: 0x04000048 RID: 72
		private static object sync = new object();

		// Token: 0x04000049 RID: 73
		private readonly long maxThreshold;

		// Token: 0x0400004A RID: 74
		private readonly string undelieverableFolderPath;

		// Token: 0x0400004B RID: 75
		private MalwareAgentPerfCountersWrapper perfCounterWrapper;
	}
}
