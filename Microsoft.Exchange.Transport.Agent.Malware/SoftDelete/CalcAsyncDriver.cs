using System;

namespace Microsoft.Exchange.Transport.Agent.Malware.SoftDelete
{
	// Token: 0x0200000D RID: 13
	internal class CalcAsyncDriver
	{
		// Token: 0x06000031 RID: 49 RVA: 0x00003D18 File Offset: 0x00001F18
		public CalcAsyncDriver(DirectoryStorage directoryStorage)
		{
			if (directoryStorage == null)
			{
				throw new ArgumentNullException("The directory storage object must be specified.");
			}
			this.DirectoryStorage = directoryStorage;
			this.DirectoryPath = directoryStorage.GetStorageDestination();
		}

		// Token: 0x17000005 RID: 5
		// (get) Token: 0x06000032 RID: 50 RVA: 0x00003D41 File Offset: 0x00001F41
		// (set) Token: 0x06000033 RID: 51 RVA: 0x00003D49 File Offset: 0x00001F49
		private string DirectoryPath { get; set; }

		// Token: 0x17000006 RID: 6
		// (get) Token: 0x06000034 RID: 52 RVA: 0x00003D52 File Offset: 0x00001F52
		// (set) Token: 0x06000035 RID: 53 RVA: 0x00003D5A File Offset: 0x00001F5A
		private DirectoryStorage DirectoryStorage { get; set; }

		// Token: 0x06000036 RID: 54 RVA: 0x00003D64 File Offset: 0x00001F64
		public void BeginStorageSizeCalculation()
		{
			SoftDeleteQueue softDeleteQueue = new SoftDeleteQueue(this.DirectoryStorage);
			CalculationAsync calculationAsync = new CalculationAsync(softDeleteQueue);
			AsyncCallback callback = new AsyncCallback(this.UpdateStorageSize);
			calculationAsync.BeginCalculation(callback, calculationAsync);
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00003D9C File Offset: 0x00001F9C
		private void UpdateStorageSize(IAsyncResult ar)
		{
			CalculationAsync calculationAsync = ar.AsyncState as CalculationAsync;
			long num = calculationAsync.EndCalculation(ar);
			this.DirectoryStorage.CurrentDirectorySize = num;
			this.DirectoryStorage.PerfCounterWrapper.UpdateRecoveryStoreSize(num, this.DirectoryStorage.MaxThreshold, true);
		}
	}
}
