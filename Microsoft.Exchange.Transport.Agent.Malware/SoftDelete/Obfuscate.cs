using System;
using System.IO;

namespace Microsoft.Exchange.Transport.Agent.Malware.SoftDelete
{
	// Token: 0x02000029 RID: 41
	internal class Obfuscate
	{
		// Token: 0x060000DA RID: 218 RVA: 0x000090A8 File Offset: 0x000072A8
		public static byte[] Encode(Stream message)
		{
			if (message == null)
			{
				throw new ArgumentException("message stream cannot be set to null");
			}
			byte[] messageAsByteArray = Obfuscate.GetMessageAsByteArray(message);
			byte[] array = new byte[messageAsByteArray.Length];
			for (int i = 0; i < messageAsByteArray.Length; i++)
			{
				byte[] array2 = array;
				int num = i;
				byte[] array3 = messageAsByteArray;
				int num2 = i;
				array2[num] = (array3[num2] ^= Obfuscate.obfuscateValue);
			}
			return array;
		}

		// Token: 0x060000DB RID: 219 RVA: 0x00009104 File Offset: 0x00007304
		public static byte[] Decode(byte[] buffer)
		{
			if (buffer == null)
			{
				throw new ArgumentException("Buffer cannot be set to null.");
			}
			byte[] array = new byte[buffer.Length];
			for (int i = 0; i < buffer.Length; i++)
			{
				byte[] array2 = array;
				int num = i;
				int num2 = i;
				array2[num] = (buffer[num2] ^= Obfuscate.obfuscateValue);
			}
			return array;
		}

		// Token: 0x060000DC RID: 220 RVA: 0x00009158 File Offset: 0x00007358
		private static byte[] GetMessageAsByteArray(Stream stream)
		{
			byte[] array = null;
			if (stream == null)
			{
				throw new ArgumentNullException("Stream cannot be set to null");
			}
			array = new byte[stream.Length];
			try
			{
				stream.Seek(0L, SeekOrigin.Begin);
				stream.Read(array, 0, (int)stream.Length);
				stream.Seek(0L, SeekOrigin.Begin);
			}
			catch (Exception)
			{
				throw;
			}
			return array;
		}

		// Token: 0x04000100 RID: 256
		private static byte obfuscateValue = byte.MaxValue;
	}
}
