using System;
using System.Configuration;
using System.IO;
using System.Reflection;
using System.Threading;
using Microsoft.Exchange.Diagnostics;
using Microsoft.Exchange.Diagnostics.Components.ActiveMonitoring;
using Microsoft.Exchange.Monitoring.ActiveMonitoring.Fips;
using Microsoft.Office.Datacenter.ActiveMonitoring;
using Microsoft.Office.Datacenter.WorkerTaskFramework;

namespace Microsoft.Exchange.Monitoring.ActiveMonitoring.Antimalware
{
	// Token: 0x02000004 RID: 4
	public class CleanupFolderResponder : ResponderWorkItem
	{
		// Token: 0x17000001 RID: 1
		// (get) Token: 0x06000005 RID: 5 RVA: 0x0000237A File Offset: 0x0000057A
		// (set) Token: 0x06000006 RID: 6 RVA: 0x00002382 File Offset: 0x00000582
		private string FolderPath { get; set; }

		// Token: 0x17000002 RID: 2
		// (get) Token: 0x06000007 RID: 7 RVA: 0x0000238B File Offset: 0x0000058B
		// (set) Token: 0x06000008 RID: 8 RVA: 0x00002393 File Offset: 0x00000593
		private TimeSpan FileRetentionPeriod { get; set; }

		// Token: 0x06000009 RID: 9 RVA: 0x0000239C File Offset: 0x0000059C
		internal static ResponderDefinition CreateDefinition(string name, string serviceName, string targetResource, string folderPath, string fileRetentionPeriod, TimeSpan recurrenceInterval, int timeoutSeconds = 600, int maxRetryAttempts = 3, bool enabled = true)
		{
			TimeSpan timeSpan;
			if (string.IsNullOrEmpty(folderPath) || string.IsNullOrEmpty(fileRetentionPeriod) || !TimeSpan.TryParse(fileRetentionPeriod, out timeSpan))
			{
				throw new ArgumentException("The parameters folderPath and/or fileRetentionPeriod are null/empty/invalid.");
			}
			ResponderDefinition responderDefinition = new ResponderDefinition();
			responderDefinition.AssemblyPath = CleanupFolderResponder.AssemblyPath;
			responderDefinition.TypeName = CleanupFolderResponder.TypeName;
			responderDefinition.Name = name;
			responderDefinition.ServiceName = serviceName;
			responderDefinition.AlertTypeId = "CleanupFolderResponder";
			responderDefinition.AlertMask = "CleanupFolderResponder";
			responderDefinition.TargetResource = targetResource;
			responderDefinition.TargetHealthState = ServiceHealthStatus.None;
			responderDefinition.RecurrenceIntervalSeconds = (int)recurrenceInterval.TotalSeconds;
			responderDefinition.TimeoutSeconds = timeoutSeconds;
			responderDefinition.MaxRetryAttempts = maxRetryAttempts;
			responderDefinition.Attributes["FolderPath"] = folderPath;
			responderDefinition.Attributes["FileRetentionPeriod"] = fileRetentionPeriod;
			responderDefinition.Enabled = enabled;
			return responderDefinition;
		}

		// Token: 0x0600000A RID: 10 RVA: 0x00002468 File Offset: 0x00000668
		protected override void DoResponderWork(CancellationToken cancellationToken)
		{
			WTFDiagnostics.TraceDebug(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "CleanupFolderResponder.DoResponderWork started.", null, "DoResponderWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\CleanupFolderResponder.cs", 115);
			this.InitializeAttributes();
			if (!Directory.Exists(this.FolderPath))
			{
				WTFDiagnostics.TraceWarning<string>(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "CleanupFolderResponder.DoResponderWork: Specified folder does not exist {0}. So exiting!", this.FolderPath, null, "DoResponderWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\CleanupFolderResponder.cs", 122);
				return;
			}
			OldFileDeletionPolicy policy = new OldFileDeletionPolicy(this.FileRetentionPeriod);
			FileDeleter.Delete(this.FolderPath, policy);
			WTFDiagnostics.TraceInformation<string, TimeSpan>(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "The folder '{0}' has been cleaned up. Files older than {1} have been deleted successfully.", this.FolderPath, this.FileRetentionPeriod, null, "DoResponderWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\CleanupFolderResponder.cs", 134);
		}

		// Token: 0x0600000B RID: 11 RVA: 0x0000251C File Offset: 0x0000071C
		private void InitializeAttributes()
		{
			this.FolderPath = base.Definition.Attributes["FolderPath"];
			this.FileRetentionPeriod = TimeSpan.Parse(base.Definition.Attributes["FileRetentionPeriod"]);
		}

		// Token: 0x04000005 RID: 5
		private static readonly string AssemblyPath = Assembly.GetExecutingAssembly().Location;

		// Token: 0x04000006 RID: 6
		private static readonly string TypeName = typeof(CleanupFolderResponder).FullName;

		// Token: 0x02000005 RID: 5
		internal static class AttributeNames
		{
			// Token: 0x04000009 RID: 9
			public const string FolderPath = "FolderPath";

			// Token: 0x0400000A RID: 10
			public const string FileRetentionPeriod = "FileRetentionPeriod";
		}

		// Token: 0x02000006 RID: 6
		internal static class DefaultValues
		{
			// Token: 0x17000003 RID: 3
			// (get) Token: 0x0600000D RID: 13 RVA: 0x00002580 File Offset: 0x00000780
			public static string FolderPath
			{
				get
				{
					string exeConfigFilename = Path.Combine(ExchangeSetupContext.BinPath, "EdgeTransport.exe.config");
					Configuration configuration = ConfigurationManager.OpenMappedExeConfiguration(new ExeConfigurationFileMap
					{
						ExeConfigFilename = exeConfigFilename
					}, ConfigurationUserLevel.None);
					string value = configuration.AppSettings.Settings["TemporaryStoragePath"].Value;
					if (string.IsNullOrEmpty(value))
					{
						return Path.Combine("D:\\ExchangeTemp\\TransportCts", "UnifiedContent");
					}
					return Path.Combine(value, "UnifiedContent");
				}
			}

			// Token: 0x0400000B RID: 11
			private const string EdgeTransportAppConfig = "EdgeTransport.exe.config";

			// Token: 0x0400000C RID: 12
			private const string TransportTemporaryStoragePathConfigKey = "TemporaryStoragePath";

			// Token: 0x0400000D RID: 13
			private const string TransportTemporaryStoragePath = "D:\\ExchangeTemp\\TransportCts";

			// Token: 0x0400000E RID: 14
			private const string UnifiedContentFolderName = "UnifiedContent";

			// Token: 0x0400000F RID: 15
			public const int TimeoutSeconds = 600;

			// Token: 0x04000010 RID: 16
			public const int MaxRetryAttempts = 3;

			// Token: 0x04000011 RID: 17
			public const bool Enabled = true;

			// Token: 0x04000012 RID: 18
			public static TimeSpan RecurrenceInterval = TimeSpan.FromHours(4.0);

			// Token: 0x04000013 RID: 19
			public static TimeSpan FileRetentionPeriod = TimeSpan.FromDays(1.0);
		}
	}
}
