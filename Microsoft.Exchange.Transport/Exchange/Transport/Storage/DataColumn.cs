using System;
using System.Globalization;
using System.IO;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Net;
using Microsoft.Isam.Esent.Interop;

namespace Microsoft.Exchange.Transport.Storage
{
	// Token: 0x020000AA RID: 170
	internal abstract class DataColumn
	{
		// Token: 0x060005CD RID: 1485 RVA: 0x00018055 File Offset: 0x00016255
		protected DataColumn(JET_coltyp type, bool fixedSize)
		{
			this.type = type;
			this.fixedSize = fixedSize;
		}

		// Token: 0x060005CE RID: 1486 RVA: 0x00018079 File Offset: 0x00016279
		protected DataColumn(JET_coltyp type, bool fixedSize, int size)
		{
			this.type = type;
			this.fixedSize = fixedSize;
			this.columnSize = size;
		}

		// Token: 0x060005CF RID: 1487 RVA: 0x000180A4 File Offset: 0x000162A4
		private DataColumn()
		{
		}

		// Token: 0x1700014F RID: 335
		// (get) Token: 0x060005D0 RID: 1488 RVA: 0x000180BA File Offset: 0x000162BA
		// (set) Token: 0x060005D1 RID: 1489 RVA: 0x000180C2 File Offset: 0x000162C2
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					throw new ArgumentException(Strings.ColumnName, "value");
				}
				this.name = value;
			}
		}

		// Token: 0x17000150 RID: 336
		// (get) Token: 0x060005D2 RID: 1490 RVA: 0x000180E8 File Offset: 0x000162E8
		// (set) Token: 0x060005D3 RID: 1491 RVA: 0x000180F0 File Offset: 0x000162F0
		public bool Required
		{
			get
			{
				return this.required;
			}
			set
			{
				this.required = value;
			}
		}

		// Token: 0x17000151 RID: 337
		// (get) Token: 0x060005D4 RID: 1492 RVA: 0x000180F9 File Offset: 0x000162F9
		// (set) Token: 0x060005D5 RID: 1493 RVA: 0x00018101 File Offset: 0x00016301
		public JET_COLUMNID ColumnId
		{
			get
			{
				return this.columnId;
			}
			set
			{
				this.columnId = value;
			}
		}

		// Token: 0x17000152 RID: 338
		// (get) Token: 0x060005D6 RID: 1494 RVA: 0x0001810A File Offset: 0x0001630A
		// (set) Token: 0x060005D7 RID: 1495 RVA: 0x00018112 File Offset: 0x00016312
		public bool Cached
		{
			get
			{
				return this.cached;
			}
			set
			{
				this.cached = value;
			}
		}

		// Token: 0x17000153 RID: 339
		// (get) Token: 0x060005D8 RID: 1496 RVA: 0x0001811B File Offset: 0x0001631B
		// (set) Token: 0x060005D9 RID: 1497 RVA: 0x00018123 File Offset: 0x00016323
		public int CacheIndex
		{
			get
			{
				return this.cacheIndex;
			}
			set
			{
				this.cacheIndex = value;
			}
		}

		// Token: 0x17000154 RID: 340
		// (get) Token: 0x060005DA RID: 1498 RVA: 0x0001812C File Offset: 0x0001632C
		// (set) Token: 0x060005DB RID: 1499 RVA: 0x00018134 File Offset: 0x00016334
		public bool MultiValued
		{
			get
			{
				return this.multiValued;
			}
			set
			{
				this.multiValued = value;
			}
		}

		// Token: 0x17000155 RID: 341
		// (get) Token: 0x060005DC RID: 1500 RVA: 0x0001813D File Offset: 0x0001633D
		internal bool Fixed
		{
			get
			{
				return this.fixedSize;
			}
		}

		// Token: 0x17000156 RID: 342
		// (get) Token: 0x060005DD RID: 1501 RVA: 0x00018145 File Offset: 0x00016345
		// (set) Token: 0x060005DE RID: 1502 RVA: 0x0001814D File Offset: 0x0001634D
		internal bool AutoIncrement
		{
			get
			{
				return this.autoIncremented;
			}
			set
			{
				this.autoIncremented = value;
			}
		}

		// Token: 0x17000157 RID: 343
		// (get) Token: 0x060005DF RID: 1503 RVA: 0x00018156 File Offset: 0x00016356
		// (set) Token: 0x060005E0 RID: 1504 RVA: 0x0001815E File Offset: 0x0001635E
		internal bool IntrinsicLV
		{
			get
			{
				return this.intrinsicLV;
			}
			set
			{
				this.intrinsicLV = value;
			}
		}

		// Token: 0x17000158 RID: 344
		// (get) Token: 0x060005E1 RID: 1505 RVA: 0x00018167 File Offset: 0x00016367
		// (set) Token: 0x060005E2 RID: 1506 RVA: 0x0001816F File Offset: 0x0001636F
		internal bool AutoVersioned
		{
			get
			{
				return this.autoVersioned;
			}
			set
			{
				this.autoVersioned = value;
			}
		}

		// Token: 0x17000159 RID: 345
		// (get) Token: 0x060005E3 RID: 1507 RVA: 0x00018178 File Offset: 0x00016378
		internal bool IsAutoGenerated
		{
			get
			{
				return this.AutoIncrement || this.AutoVersioned;
			}
		}

		// Token: 0x1700015A RID: 346
		// (get) Token: 0x060005E4 RID: 1508 RVA: 0x0001818A File Offset: 0x0001638A
		internal JET_coltyp JetColType
		{
			get
			{
				return this.type;
			}
		}

		// Token: 0x060005E5 RID: 1509 RVA: 0x00018194 File Offset: 0x00016394
		public static DataColumn CreateInstance(Type typeInfo)
		{
			if (typeInfo == typeof(int))
			{
				return new DataColumn<int>(JET_coltyp.Long, true);
			}
			if (typeInfo == typeof(long))
			{
				return new DataColumn<long>((JET_coltyp)15, true);
			}
			if (typeInfo == typeof(byte))
			{
				return new DataColumn<byte>(JET_coltyp.UnsignedByte, true);
			}
			if (typeInfo == typeof(bool))
			{
				return new DataColumn<bool>(JET_coltyp.Bit, true);
			}
			if (typeInfo == typeof(string))
			{
				return new DataColumnString(JET_coltyp.LongText, false);
			}
			if (typeInfo == typeof(byte[]))
			{
				return new DataColumnByteArray(JET_coltyp.LongBinary, false);
			}
			if (typeInfo == typeof(Guid))
			{
				return new DataColumn<Guid>((JET_coltyp)16, false);
			}
			if (typeInfo == typeof(DateTime))
			{
				return new DataColumn<DateTime>(JET_coltyp.DateTime, false);
			}
			if (typeInfo == typeof(IPvxAddress))
			{
				return new DataColumn<IPvxAddress>(JET_coltyp.Binary, true, 16);
			}
			throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture, "DataColumn.CreateInstance(): Type '{0}' not supported", new object[]
			{
				typeInfo.FullName
			}));
		}

		// Token: 0x060005E6 RID: 1510 RVA: 0x000182D8 File Offset: 0x000164D8
		public static void ReopenAsLazyReader(Stream stream)
		{
			CachingStream cachingStream = stream as CachingStream;
			if (cachingStream == null)
			{
				throw new ArgumentException(Strings.IncorrectBaseStream);
			}
			if (cachingStream.InMemory)
			{
				cachingStream.ReleaseDatabase();
				return;
			}
			cachingStream.ReOpenForRead();
		}

		// Token: 0x060005E7 RID: 1511 RVA: 0x00018314 File Offset: 0x00016514
		public JET_COLUMNDEF MakeColumnDef()
		{
			JET_COLUMNDEF jet_COLUMNDEF = new JET_COLUMNDEF();
			jet_COLUMNDEF.cp = JET_CP.Unicode;
			jet_COLUMNDEF.cbMax = this.columnSize;
			jet_COLUMNDEF.coltyp = this.JetColType;
			if (this.autoIncremented)
			{
				jet_COLUMNDEF.grbit = ColumndefGrbit.ColumnAutoincrement;
			}
			else if (this.autoVersioned)
			{
				jet_COLUMNDEF.grbit = ColumndefGrbit.ColumnVersion;
			}
			else
			{
				jet_COLUMNDEF.grbit = ((this.Required ? ColumndefGrbit.ColumnNotNULL : (ColumndefGrbit.ColumnTagged | ColumndefGrbit.ColumnMaybeNull)) | ((this.Fixed & this.Required) ? ColumndefGrbit.ColumnFixed : ColumndefGrbit.None) | (this.MultiValued ? ColumndefGrbit.ColumnMultiValued : ColumndefGrbit.None));
				if (this.type == JET_coltyp.LongText || this.type == JET_coltyp.LongBinary)
				{
					jet_COLUMNDEF.grbit |= (ColumndefGrbit)524288;
				}
			}
			return jet_COLUMNDEF;
		}

		// Token: 0x060005E8 RID: 1512 RVA: 0x000183CF File Offset: 0x000165CF
		public Stream OpenImmediateReader(DataTableCursor cursor, DataRow row, int sequence = 1)
		{
			return new DataStreamImmediateReader(this, cursor, row, sequence);
		}

		// Token: 0x060005E9 RID: 1513 RVA: 0x000183DC File Offset: 0x000165DC
		public Stream OpenLazyReader(DataTableCursor cursor, DataRow row, int sequence = 1)
		{
			Stream parentStream = new DataStreamLazyReader(this, cursor, row, sequence);
			return new BufferedStream(parentStream, DataStream.BufferedStreamSize);
		}

		// Token: 0x060005EA RID: 1514 RVA: 0x00018400 File Offset: 0x00016600
		public Stream OpenCachingWriter(DataTableCursor cursor, DataRow dataRow, bool update, Func<bool> checkpointCallback, int sequence = 1)
		{
			DataStreamImmediateWriter stream = new DataStreamImmediateWriter(this, cursor, dataRow, update, checkpointCallback, sequence);
			Stream parentStream = new PooledBufferedStream(stream, DataColumn.cachingWriterPool);
			return new CachingStream(parentStream, 32768);
		}

		// Token: 0x060005EB RID: 1515 RVA: 0x00018434 File Offset: 0x00016634
		public Stream OpenImmediateWriter(DataTableCursor cursor, DataRow dataRow, bool update, int sequence = 1)
		{
			DataStreamImmediateWriter stream = new DataStreamImmediateWriter(this, cursor, dataRow, update, null, sequence);
			return new PooledBufferedStream(stream, DataColumn.immediateWriterPool);
		}

		// Token: 0x060005EC RID: 1516 RVA: 0x0001845C File Offset: 0x0001665C
		public ColumnValue GetColumnValueForRetrieval()
		{
			ColumnValue columnValue;
			switch (this.JetColType)
			{
			case JET_coltyp.Bit:
				columnValue = new BoolColumnValue();
				goto IL_E3;
			case JET_coltyp.UnsignedByte:
				columnValue = new ByteColumnValue();
				goto IL_E3;
			case JET_coltyp.Short:
				columnValue = new Int16ColumnValue();
				goto IL_E3;
			case JET_coltyp.Long:
				columnValue = new Int32ColumnValue();
				goto IL_E3;
			case JET_coltyp.Currency:
				columnValue = new Int64ColumnValue();
				goto IL_E3;
			case JET_coltyp.IEEESingle:
				columnValue = new FloatColumnValue();
				goto IL_E3;
			case JET_coltyp.IEEEDouble:
				columnValue = new BytesColumnValue();
				goto IL_E3;
			case JET_coltyp.DateTime:
				columnValue = new DateTimeColumnValue();
				goto IL_E3;
			case JET_coltyp.Binary:
			case JET_coltyp.LongBinary:
				columnValue = new BytesColumnValue();
				goto IL_E3;
			case JET_coltyp.Text:
			case JET_coltyp.LongText:
				columnValue = new StringColumnValue();
				goto IL_E3;
			case (JET_coltyp)14:
				columnValue = new UInt32ColumnValue();
				goto IL_E3;
			case (JET_coltyp)15:
				columnValue = new Int64ColumnValue();
				goto IL_E3;
			case (JET_coltyp)16:
				columnValue = new GuidColumnValue();
				goto IL_E3;
			case (JET_coltyp)17:
				columnValue = new UInt16ColumnValue();
				goto IL_E3;
			}
			throw new ArgumentException(string.Format("GetColumnValueForRetrieval called with unknown column type! {0}", this.JetColType));
			IL_E3:
			columnValue.Columnid = this.ColumnId;
			return columnValue;
		}

		// Token: 0x060005ED RID: 1517
		internal abstract void ColumnValueToCache(ColumnValue data, ColumnCache cache);

		// Token: 0x060005EE RID: 1518
		internal abstract byte[] BytesFromCache(ColumnCache cache);

		// Token: 0x060005EF RID: 1519
		internal abstract ColumnCache NewCacheCell();

		// Token: 0x060005F0 RID: 1520 RVA: 0x0001855C File Offset: 0x0001675C
		internal byte[] BytesFromCursor(DataTableCursor cursor, bool retrieveCopy = false, int sequence = 1)
		{
			try
			{
				return Api.RetrieveColumn(cursor.Session, cursor.TableId, this.ColumnId, RetrieveColumnGrbit.RetrieveNull | (retrieveCopy ? RetrieveColumnGrbit.RetrieveCopy : RetrieveColumnGrbit.None), new JET_RETINFO
				{
					itagSequence = sequence
				});
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return null;
		}

		// Token: 0x060005F1 RID: 1521 RVA: 0x000185C8 File Offset: 0x000167C8
		internal int ReadBytesFromCursor(DataTableCursor cursor, bool retrieveCopy, int sequence, int offset, byte[] buffer, int count)
		{
			JET_RETINFO retinfo = new JET_RETINFO
			{
				ibLongValue = offset,
				itagSequence = sequence
			};
			int val = 0;
			try
			{
				Api.JetRetrieveColumn(cursor.Session, cursor.TableId, this.ColumnId, buffer, count, 0, out val, RetrieveColumnGrbit.RetrieveNull | (retrieveCopy ? RetrieveColumnGrbit.RetrieveCopy : RetrieveColumnGrbit.None), retinfo);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return Math.Min(count, val);
		}

		// Token: 0x060005F2 RID: 1522 RVA: 0x00018650 File Offset: 0x00016850
		internal void CopyData(DataTableCursor cursorFrom, DataTableCursor cursorTo)
		{
			for (int i = 1; i <= this.GetValueCount(cursorFrom); i++)
			{
				if (this.Cached)
				{
					this.SaveToCursor(cursorTo, this.BytesFromCursor(cursorFrom, false, i), i, false, -1);
				}
				else
				{
					byte[] array = new byte[32768];
					int num = 0;
					int num2;
					do
					{
						num2 = this.ReadBytesFromCursor(cursorFrom, false, i, num, array, array.Length);
						this.SaveToCursor(cursorTo, array, i, true, num2);
						num += num2;
					}
					while (num2 == array.Length);
				}
			}
		}

		// Token: 0x060005F3 RID: 1523 RVA: 0x000186C0 File Offset: 0x000168C0
		internal int GetValueCount(DataTableCursor cursor)
		{
			if (!this.MultiValued)
			{
				return 1;
			}
			JET_RETRIEVECOLUMN jet_RETRIEVECOLUMN = new JET_RETRIEVECOLUMN
			{
				columnid = this.columnId,
				itagSequence = 0
			};
			Api.JetRetrieveColumns(cursor.Session, cursor.TableId, new JET_RETRIEVECOLUMN[]
			{
				jet_RETRIEVECOLUMN
			}, 1);
			return jet_RETRIEVECOLUMN.itagSequence;
		}

		// Token: 0x060005F4 RID: 1524 RVA: 0x00018718 File Offset: 0x00016918
		internal string StringFromCursor(DataTableCursor cursor)
		{
			try
			{
				return Api.RetrieveColumnAsString(cursor.Session, cursor.TableId, this.ColumnId);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return null;
		}

		// Token: 0x060005F5 RID: 1525 RVA: 0x0001876C File Offset: 0x0001696C
		internal long? Int64FromCursor(DataTableCursor cursor)
		{
			try
			{
				return Api.RetrieveColumnAsInt64(cursor.Session, cursor.TableId, this.ColumnId);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return null;
		}

		// Token: 0x060005F6 RID: 1526 RVA: 0x000187C8 File Offset: 0x000169C8
		internal int? Int32FromCursor(DataTableCursor cursor)
		{
			return this.Int32FromCursor(cursor, RetrieveColumnGrbit.None);
		}

		// Token: 0x060005F7 RID: 1527 RVA: 0x000187D2 File Offset: 0x000169D2
		internal int? Int32FromIndex(DataTableCursor cursor)
		{
			return this.Int32FromCursor(cursor, RetrieveColumnGrbit.RetrieveFromIndex);
		}

		// Token: 0x060005F8 RID: 1528 RVA: 0x000187DC File Offset: 0x000169DC
		internal byte? ByteFromIndex(DataTableCursor cursor)
		{
			return this.ByteFromCursor(cursor, RetrieveColumnGrbit.RetrieveFromIndex);
		}

		// Token: 0x060005F9 RID: 1529 RVA: 0x000187E6 File Offset: 0x000169E6
		internal int? Int32FromBookmark(DataTableCursor cursor)
		{
			return this.Int32FromCursor(cursor, RetrieveColumnGrbit.RetrieveFromPrimaryBookmark);
		}

		// Token: 0x060005FA RID: 1530 RVA: 0x000187F0 File Offset: 0x000169F0
		internal bool? BoolFromCursor(DataTableCursor cursor)
		{
			try
			{
				return Api.RetrieveColumnAsBoolean(cursor.Session, cursor.TableId, this.ColumnId);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return null;
		}

		// Token: 0x060005FB RID: 1531 RVA: 0x0001884C File Offset: 0x00016A4C
		internal void SaveToCursor(DataTableCursor cursor, byte[] data, int sequence = 1, bool appendLV = false, int count = -1)
		{
			if (count == -1)
			{
				count = ((data == null) ? 0 : data.Length);
			}
			this.SaveToCursor(cursor, data, sequence, count, 0, appendLV ? SetColumnGrbit.AppendLV : SetColumnGrbit.None);
		}

		// Token: 0x060005FC RID: 1532 RVA: 0x00018874 File Offset: 0x00016A74
		internal void SaveToCursor(DataTableCursor cursor, byte[] data, int sequence, int count, int offset, SetColumnGrbit grbit)
		{
			JET_SETINFO setinfo = new JET_SETINFO
			{
				ibLongValue = offset,
				itagSequence = sequence
			};
			if (this.IntrinsicLV)
			{
				grbit |= SetColumnGrbit.IntrinsicLV;
			}
			try
			{
				Api.JetSetColumn(cursor.Session, cursor.TableId, this.ColumnId, data, count, grbit, setinfo);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
		}

		// Token: 0x060005FD RID: 1533 RVA: 0x000188F4 File Offset: 0x00016AF4
		private int? Int32FromCursor(DataTableCursor cursor, RetrieveColumnGrbit grbit)
		{
			try
			{
				return Api.RetrieveColumnAsInt32(cursor.Session, cursor.TableId, this.ColumnId, grbit);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return null;
		}

		// Token: 0x060005FE RID: 1534 RVA: 0x00018950 File Offset: 0x00016B50
		private byte? ByteFromCursor(DataTableCursor cursor, RetrieveColumnGrbit grbit)
		{
			try
			{
				return Api.RetrieveColumnAsByte(cursor.Session, cursor.TableId, this.ColumnId, grbit);
			}
			catch (EsentErrorException ex)
			{
				if (!DataSource.HandleIsamException(ex, cursor.Connection.Source))
				{
					throw;
				}
			}
			return null;
		}

		// Token: 0x040002EB RID: 747
		private const int UnboundCacheIndex = -1;

		// Token: 0x040002EC RID: 748
		private static BufferPool cachingWriterPool = new BufferPool(DataStream.JetChunkSize, true);

		// Token: 0x040002ED RID: 749
		private static BufferPool immediateWriterPool = new BufferPool(DataStream.TransportChunkSize, true);

		// Token: 0x040002EE RID: 750
		private readonly JET_coltyp type;

		// Token: 0x040002EF RID: 751
		private readonly bool fixedSize = true;

		// Token: 0x040002F0 RID: 752
		private string name;

		// Token: 0x040002F1 RID: 753
		private bool required;

		// Token: 0x040002F2 RID: 754
		private bool cached;

		// Token: 0x040002F3 RID: 755
		private bool autoIncremented;

		// Token: 0x040002F4 RID: 756
		private bool autoVersioned;

		// Token: 0x040002F5 RID: 757
		private bool intrinsicLV;

		// Token: 0x040002F6 RID: 758
		private bool multiValued;

		// Token: 0x040002F7 RID: 759
		private int columnSize;

		// Token: 0x040002F8 RID: 760
		private int cacheIndex = -1;

		// Token: 0x040002F9 RID: 761
		private JET_COLUMNID columnId;
	}
}
