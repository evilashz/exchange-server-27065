using System;
using System.Collections.Generic;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;

namespace Microsoft.Exchange.Management.SystemConfigurationTasks
{
	// Token: 0x02000A8F RID: 2703
	[Cmdlet("Get", "MalwareFilterRecoveryItem", DefaultParameterSetName = "Identity")]
	public sealed class GetMalwareFilterRecoveryItem : MalwareFilterRecoveryItemAccessTask
	{
		// Token: 0x17001D0A RID: 7434
		// (get) Token: 0x06006012 RID: 24594 RVA: 0x0019108C File Offset: 0x0018F28C
		// (set) Token: 0x06006013 RID: 24595 RVA: 0x00191094 File Offset: 0x0018F294
		[Parameter(Mandatory = false, ParameterSetName = "Identity", ValueFromPipeline = true, ValueFromPipelineByPropertyName = true, Position = 0)]
		[ValidateNotNullOrEmpty]
		public string Identity { get; set; }

		// Token: 0x06006014 RID: 24596 RVA: 0x001910A0 File Offset: 0x0018F2A0
		protected override void InternalProcessRecord()
		{
			TaskLogger.LogEnter();
			if (string.IsNullOrEmpty(this.Identity))
			{
				List<MalwareFilterRecoveryItem> allItems = base.UndeliverableItems.GetAllItems();
				using (List<MalwareFilterRecoveryItem>.Enumerator enumerator = allItems.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						MalwareFilterRecoveryItem sendToPipeline = enumerator.Current;
						base.WriteObject(sendToPipeline);
					}
					goto IL_66;
				}
			}
			base.WriteObject(base.UndeliverableItems.FindItem(this.Identity));
			IL_66:
			TaskLogger.LogExit();
		}
	}
}
