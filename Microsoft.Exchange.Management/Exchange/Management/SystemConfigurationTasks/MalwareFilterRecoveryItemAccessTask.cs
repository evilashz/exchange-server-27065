using System;
using System.IO;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data.Directory;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Management.Tasks;
using Microsoft.Win32;

namespace Microsoft.Exchange.Management.SystemConfigurationTasks
{
	// Token: 0x02000A8E RID: 2702
	public abstract class MalwareFilterRecoveryItemAccessTask : Task
	{
		// Token: 0x0600600F RID: 24591 RVA: 0x00190EEC File Offset: 0x0018F0EC
		protected MalwareFilterRecoveryItemAccessTask()
		{
			if (!MalwareFilterRecoveryItemAccessTask.IsHubTransportServer())
			{
				base.WriteError(new CannotRunOnNonHubTransportException(), ErrorCategory.InvalidOperation, null);
			}
			string text = null;
			string text2 = null;
			using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup"))
			{
				if (registryKey != null)
				{
					string text3 = registryKey.GetValue("MsiInstallPath") as string;
					if (text3 != null)
					{
						text = Path.Combine(text3, "TransportRoles\\data\\Filtering\\Undeliverable");
						text2 = Path.Combine(text3, "TransportRoles\\Replay");
					}
				}
			}
			if (string.IsNullOrEmpty(text))
			{
				base.WriteError(new FolderLocationUnknownException(Strings.ErrorFolderLocationUnknown("TransportRoles\\data\\Filtering\\Undeliverable")), ErrorCategory.ObjectNotFound, "TransportRoles\\data\\Filtering\\Undeliverable");
			}
			if (string.IsNullOrEmpty(text2))
			{
				base.WriteError(new FolderLocationUnknownException(Strings.ErrorFolderLocationUnknown("TransportRoles\\Replay")), ErrorCategory.ObjectNotFound, "TransportRoles\\Replay");
			}
			if (!Directory.Exists(text))
			{
				base.WriteError(new FolderNotExistException(Strings.ErrorFolderNotExist(text)), ErrorCategory.ObjectNotFound, text);
			}
			if (!Directory.Exists(text2))
			{
				base.WriteError(new FolderNotExistException(Strings.ErrorFolderNotExist(text2)), ErrorCategory.ObjectNotFound, text2);
			}
			this.undeliverableItems = new UndeliverableItems(text, text2, new Task.TaskWarningLoggingDelegate(this.WriteWarning), new Task.TaskErrorLoggingDelegate(base.WriteError));
		}

		// Token: 0x17001D09 RID: 7433
		// (get) Token: 0x06006010 RID: 24592 RVA: 0x0019102C File Offset: 0x0018F22C
		internal UndeliverableItems UndeliverableItems
		{
			get
			{
				return this.undeliverableItems;
			}
		}

		// Token: 0x06006011 RID: 24593 RVA: 0x00191034 File Offset: 0x0018F234
		private static bool IsHubTransportServer()
		{
			ITopologyConfigurationSession topologyConfigurationSession = DirectorySessionFactory.Default.CreateTopologyConfigurationSession(false, ConsistencyMode.PartiallyConsistent, ADSessionSettings.FromRootOrgScopeSet(), 126, "IsHubTransportServer", "f:\\15.00.1497\\sources\\dev\\Management\\src\\Management\\SystemConfigurationTasks\\MessageHygiene\\MalwareFilterRecoveryItem\\MalwareFilterRecoveryItemAccessTask.cs");
			try
			{
				Server server = topologyConfigurationSession.FindLocalServer();
				return server != null && server.IsHubTransportServer;
			}
			catch (LocalServerNotFoundException)
			{
			}
			return false;
		}

		// Token: 0x0400352B RID: 13611
		private const string ExchangeSetupKey = "SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup";

		// Token: 0x0400352C RID: 13612
		private const string UndeliverableFolder = "TransportRoles\\data\\Filtering\\Undeliverable";

		// Token: 0x0400352D RID: 13613
		private const string ReplayFolder = "TransportRoles\\Replay";

		// Token: 0x0400352E RID: 13614
		private UndeliverableItems undeliverableItems;
	}
}
