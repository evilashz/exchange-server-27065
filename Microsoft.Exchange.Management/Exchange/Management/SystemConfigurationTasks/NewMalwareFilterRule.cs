using System;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Common;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Management.Tasks;
using Microsoft.Exchange.MessagingPolicies;
using Microsoft.Exchange.MessagingPolicies.Rules;

namespace Microsoft.Exchange.Management.SystemConfigurationTasks
{
	// Token: 0x02000A8B RID: 2699
	[Cmdlet("New", "MalwareFilterRule", SupportsShouldProcess = true)]
	public sealed class NewMalwareFilterRule : NewHygieneFilterRuleTaskBase
	{
		// Token: 0x06005FE8 RID: 24552 RVA: 0x001909B7 File Offset: 0x0018EBB7
		public NewMalwareFilterRule() : base("MalwareFilterVersioned")
		{
		}

		// Token: 0x17001CF8 RID: 7416
		// (get) Token: 0x06005FE9 RID: 24553 RVA: 0x001909C4 File Offset: 0x0018EBC4
		protected override LocalizedString ConfirmationMessage
		{
			get
			{
				return Strings.ConfirmationMessageNewMalwareFilterRule(base.Name);
			}
		}

		// Token: 0x17001CF9 RID: 7417
		// (get) Token: 0x06005FEA RID: 24554 RVA: 0x001909D1 File Offset: 0x0018EBD1
		// (set) Token: 0x06005FEB RID: 24555 RVA: 0x001909E8 File Offset: 0x0018EBE8
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] SentTo
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["SentTo"];
			}
			set
			{
				base.Fields["SentTo"] = value;
			}
		}

		// Token: 0x17001CFA RID: 7418
		// (get) Token: 0x06005FEC RID: 24556 RVA: 0x001909FB File Offset: 0x0018EBFB
		// (set) Token: 0x06005FED RID: 24557 RVA: 0x00190A12 File Offset: 0x0018EC12
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] SentToMemberOf
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["SentToMemberOf"];
			}
			set
			{
				base.Fields["SentToMemberOf"] = value;
			}
		}

		// Token: 0x17001CFB RID: 7419
		// (get) Token: 0x06005FEE RID: 24558 RVA: 0x00190A25 File Offset: 0x0018EC25
		// (set) Token: 0x06005FEF RID: 24559 RVA: 0x00190A3C File Offset: 0x0018EC3C
		[Parameter(Mandatory = false)]
		public Word[] RecipientDomainIs
		{
			get
			{
				return (Word[])base.Fields["RecipientDomainIs"];
			}
			set
			{
				base.Fields["RecipientDomainIs"] = value;
			}
		}

		// Token: 0x17001CFC RID: 7420
		// (get) Token: 0x06005FF0 RID: 24560 RVA: 0x00190A4F File Offset: 0x0018EC4F
		// (set) Token: 0x06005FF1 RID: 24561 RVA: 0x00190A66 File Offset: 0x0018EC66
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] ExceptIfSentTo
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["ExceptIfSentTo"];
			}
			set
			{
				base.Fields["ExceptIfSentTo"] = value;
			}
		}

		// Token: 0x17001CFD RID: 7421
		// (get) Token: 0x06005FF2 RID: 24562 RVA: 0x00190A79 File Offset: 0x0018EC79
		// (set) Token: 0x06005FF3 RID: 24563 RVA: 0x00190A90 File Offset: 0x0018EC90
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] ExceptIfSentToMemberOf
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["ExceptIfSentToMemberOf"];
			}
			set
			{
				base.Fields["ExceptIfSentToMemberOf"] = value;
			}
		}

		// Token: 0x17001CFE RID: 7422
		// (get) Token: 0x06005FF4 RID: 24564 RVA: 0x00190AA3 File Offset: 0x0018ECA3
		// (set) Token: 0x06005FF5 RID: 24565 RVA: 0x00190ABA File Offset: 0x0018ECBA
		[Parameter(Mandatory = false)]
		public Word[] ExceptIfRecipientDomainIs
		{
			get
			{
				return (Word[])base.Fields["ExceptIfRecipientDomainIs"];
			}
			set
			{
				base.Fields["ExceptIfRecipientDomainIs"] = value;
			}
		}

		// Token: 0x17001CFF RID: 7423
		// (get) Token: 0x06005FF6 RID: 24566 RVA: 0x00190ACD File Offset: 0x0018ECCD
		// (set) Token: 0x06005FF7 RID: 24567 RVA: 0x00190AE4 File Offset: 0x0018ECE4
		[Parameter(Mandatory = true)]
		[ValidateNotNull]
		public MalwareFilterPolicyIdParameter MalwareFilterPolicy
		{
			get
			{
				return (MalwareFilterPolicyIdParameter)base.Fields["MalwareFilterPolicy"];
			}
			set
			{
				base.Fields["MalwareFilterPolicy"] = value;
			}
		}

		// Token: 0x06005FF8 RID: 24568 RVA: 0x00190AF8 File Offset: 0x0018ECF8
		protected override void InternalValidate()
		{
			base.InternalValidate();
			this.policyObject = HygieneUtils.ResolvePolicyObject<MalwareFilterPolicy>(this, this.ConfigurationSession, this.MalwareFilterPolicy);
			TransportRule transportRule = HygieneUtils.ResolvePolicyRuleObject<MalwareFilterPolicy>(this.policyObject, this.ConfigurationSession, this.ruleCollectionName);
			if (transportRule != null)
			{
				base.WriteError(new OperationNotAllowedException(Strings.ErrorPolicyRuleExists(this.policyObject.Name, transportRule.Name)), ErrorCategory.InvalidOperation, null);
			}
			if (this.policyObject != null && this.policyObject.IsDefault)
			{
				base.WriteError(new OperationNotAllowedException(Strings.ErrorDefaultPolicyCannotHaveRule(this.policyObject.Name)), ErrorCategory.InvalidOperation, null);
			}
		}

		// Token: 0x06005FF9 RID: 24569 RVA: 0x00190B94 File Offset: 0x0018ED94
		protected override void InternalProcessRecord()
		{
			MalwareFilterRule malwareFilterRule = new MalwareFilterRule(null, base.Name, base.Priority, base.Enabled ? RuleState.Enabled : RuleState.Disabled, base.Comments, base.Conditions, base.Exceptions, new MalwareFilterPolicyIdParameter(this.policyObject.Name));
			int priority = base.Fields.IsModified("Priority") ? malwareFilterRule.Priority : -1;
			TransportRule transportRule = null;
			try
			{
				TransportRule rule = malwareFilterRule.ToInternalRule();
				ADRuleStorageManager adruleStorageManager = new ADRuleStorageManager(this.ruleCollectionName, base.DataSession);
				adruleStorageManager.LoadRuleCollection();
				adruleStorageManager.NewRule(rule, this.ResolveCurrentOrganization(), ref priority, out transportRule);
			}
			catch (RulesValidationException exception)
			{
				base.WriteError(exception, ErrorCategory.InvalidArgument, base.Name);
			}
			catch (InvalidPriorityException exception2)
			{
				base.WriteError(exception2, ErrorCategory.InvalidArgument, null);
			}
			catch (ParserException exception3)
			{
				base.WriteError(exception3, ErrorCategory.InvalidData, null);
			}
			malwareFilterRule.Priority = priority;
			malwareFilterRule.SetTransportRule(transportRule);
			base.WriteObject(malwareFilterRule);
		}

		// Token: 0x0400352A RID: 13610
		private MalwareFilterPolicy policyObject;
	}
}
