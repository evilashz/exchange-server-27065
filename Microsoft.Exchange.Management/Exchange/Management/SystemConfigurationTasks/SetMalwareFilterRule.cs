using System;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Common;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Management.Tasks;
using Microsoft.Exchange.MessagingPolicies.Rules;

namespace Microsoft.Exchange.Management.SystemConfigurationTasks
{
	// Token: 0x02000A8D RID: 2701
	[Cmdlet("Set", "MalwareFilterRule", SupportsShouldProcess = true, DefaultParameterSetName = "Identity")]
	public sealed class SetMalwareFilterRule : SetHygieneFilterRuleTaskBase<MalwareFilterRule>
	{
		// Token: 0x06005FFC RID: 24572 RVA: 0x00190CC3 File Offset: 0x0018EEC3
		public SetMalwareFilterRule() : base("MalwareFilterVersioned")
		{
		}

		// Token: 0x17001D01 RID: 7425
		// (get) Token: 0x06005FFD RID: 24573 RVA: 0x00190CD0 File Offset: 0x0018EED0
		protected override LocalizedString ConfirmationMessage
		{
			get
			{
				return Strings.ConfirmationMessageSetMalwareFilterRule(this.Identity.ToString());
			}
		}

		// Token: 0x17001D02 RID: 7426
		// (get) Token: 0x06005FFE RID: 24574 RVA: 0x00190CE2 File Offset: 0x0018EEE2
		// (set) Token: 0x06005FFF RID: 24575 RVA: 0x00190CF9 File Offset: 0x0018EEF9
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] SentTo
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["SentTo"];
			}
			set
			{
				base.Fields["SentTo"] = value;
			}
		}

		// Token: 0x17001D03 RID: 7427
		// (get) Token: 0x06006000 RID: 24576 RVA: 0x00190D0C File Offset: 0x0018EF0C
		// (set) Token: 0x06006001 RID: 24577 RVA: 0x00190D23 File Offset: 0x0018EF23
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] SentToMemberOf
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["SentToMemberOf"];
			}
			set
			{
				base.Fields["SentToMemberOf"] = value;
			}
		}

		// Token: 0x17001D04 RID: 7428
		// (get) Token: 0x06006002 RID: 24578 RVA: 0x00190D36 File Offset: 0x0018EF36
		// (set) Token: 0x06006003 RID: 24579 RVA: 0x00190D4D File Offset: 0x0018EF4D
		[Parameter(Mandatory = false)]
		public Word[] RecipientDomainIs
		{
			get
			{
				return (Word[])base.Fields["RecipientDomainIs"];
			}
			set
			{
				base.Fields["RecipientDomainIs"] = value;
			}
		}

		// Token: 0x17001D05 RID: 7429
		// (get) Token: 0x06006004 RID: 24580 RVA: 0x00190D60 File Offset: 0x0018EF60
		// (set) Token: 0x06006005 RID: 24581 RVA: 0x00190D77 File Offset: 0x0018EF77
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] ExceptIfSentTo
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["ExceptIfSentTo"];
			}
			set
			{
				base.Fields["ExceptIfSentTo"] = value;
			}
		}

		// Token: 0x17001D06 RID: 7430
		// (get) Token: 0x06006006 RID: 24582 RVA: 0x00190D8A File Offset: 0x0018EF8A
		// (set) Token: 0x06006007 RID: 24583 RVA: 0x00190DA1 File Offset: 0x0018EFA1
		[Parameter(Mandatory = false)]
		public RecipientIdParameter[] ExceptIfSentToMemberOf
		{
			get
			{
				return (RecipientIdParameter[])base.Fields["ExceptIfSentToMemberOf"];
			}
			set
			{
				base.Fields["ExceptIfSentToMemberOf"] = value;
			}
		}

		// Token: 0x17001D07 RID: 7431
		// (get) Token: 0x06006008 RID: 24584 RVA: 0x00190DB4 File Offset: 0x0018EFB4
		// (set) Token: 0x06006009 RID: 24585 RVA: 0x00190DCB File Offset: 0x0018EFCB
		[Parameter(Mandatory = false)]
		public Word[] ExceptIfRecipientDomainIs
		{
			get
			{
				return (Word[])base.Fields["ExceptIfRecipientDomainIs"];
			}
			set
			{
				base.Fields["ExceptIfRecipientDomainIs"] = value;
			}
		}

		// Token: 0x17001D08 RID: 7432
		// (get) Token: 0x0600600A RID: 24586 RVA: 0x00190DDE File Offset: 0x0018EFDE
		// (set) Token: 0x0600600B RID: 24587 RVA: 0x00190DF5 File Offset: 0x0018EFF5
		[Parameter(Mandatory = false)]
		public MalwareFilterPolicyIdParameter MalwareFilterPolicy
		{
			get
			{
				return (MalwareFilterPolicyIdParameter)base.Fields["MalwareFilterPolicy"];
			}
			set
			{
				base.Fields["MalwareFilterPolicy"] = value;
			}
		}

		// Token: 0x0600600C RID: 24588 RVA: 0x00190E08 File Offset: 0x0018F008
		internal override HygieneFilterRule CreateTaskRuleFromInternalRule(TransportRule internalRule, int priority)
		{
			return MalwareFilterRule.CreateFromInternalRule(internalRule, priority, this.DataObject);
		}

		// Token: 0x0600600D RID: 24589 RVA: 0x00190E17 File Offset: 0x0018F017
		internal override ADIdParameter GetPolicyIdentity()
		{
			if (this.MalwareFilterPolicy != null && this.policyObject != null)
			{
				return new MalwareFilterPolicyIdParameter(this.policyObject.Name);
			}
			return null;
		}

		// Token: 0x0600600E RID: 24590 RVA: 0x00190E3C File Offset: 0x0018F03C
		protected override void InternalValidate()
		{
			base.InternalValidate();
			if (this.MalwareFilterPolicy != null)
			{
				this.policyObject = HygieneUtils.ResolvePolicyObject<MalwareFilterPolicy>(this, base.DataSession, this.MalwareFilterPolicy);
				TransportRule transportRule = HygieneUtils.ResolvePolicyRuleObject<MalwareFilterPolicy>((MalwareFilterPolicy)this.policyObject, base.DataSession, this.ruleCollectionName);
				if (transportRule != null)
				{
					base.WriteError(new OperationNotAllowedException(Strings.ErrorPolicyRuleExists(this.policyObject.Name, transportRule.Name)), ErrorCategory.InvalidOperation, null);
				}
				if (this.policyObject != null && ((MalwareFilterPolicy)this.policyObject).IsDefault)
				{
					base.WriteError(new OperationNotAllowedException(Strings.ErrorDefaultPolicyCannotHaveRule(this.policyObject.Name)), ErrorCategory.InvalidOperation, null);
				}
			}
		}
	}
}
