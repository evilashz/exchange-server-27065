using System;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;

namespace Microsoft.Exchange.Management.Edge.SetupTasks
{
	// Token: 0x02000300 RID: 768
	[Cmdlet("Install", "AntimalwareService")]
	[LocDescription(Strings.IDs.InstallAntimalwareServiceTask)]
	public class InstallAntimalwareService : ManageAntimalwareService
	{
		// Token: 0x1700079F RID: 1951
		// (get) Token: 0x06001A3C RID: 6716 RVA: 0x000748DA File Offset: 0x00072ADA
		// (set) Token: 0x06001A3D RID: 6717 RVA: 0x000748F1 File Offset: 0x00072AF1
		[Parameter(Mandatory = false)]
		public string[] ServicesDependedOnParameter
		{
			get
			{
				return base.Fields["ServicesDependedOn"] as string[];
			}
			set
			{
				base.Fields["ServicesDependedOn"] = value;
			}
		}

		// Token: 0x06001A3E RID: 6718 RVA: 0x00074904 File Offset: 0x00072B04
		protected override void InternalValidate()
		{
			base.InternalValidate();
			if (base.HasErrors)
			{
				return;
			}
			if (this.ServicesDependedOnParameter != null)
			{
				foreach (string serviceName in this.ServicesDependedOnParameter)
				{
					if (!Utils.GetServiceExists(serviceName))
					{
						base.WriteError(new ArgumentException(Strings.InvalidServicesDependedOn(serviceName), "ServicesDependedOn"), ErrorCategory.InvalidArgument, null);
					}
				}
			}
			base.ServicesDependedOn = this.ServicesDependedOnParameter;
		}

		// Token: 0x06001A3F RID: 6719 RVA: 0x00074972 File Offset: 0x00072B72
		protected override void InternalProcessRecord()
		{
			TaskLogger.LogEnter();
			base.Install();
			TaskLogger.LogExit();
		}

		// Token: 0x04000B6E RID: 2926
		public const string ServicesDependedOnParamName = "ServicesDependedOn";
	}
}
